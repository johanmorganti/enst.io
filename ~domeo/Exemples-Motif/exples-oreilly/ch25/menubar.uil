/* Written by Dave Brennan.
 * Copyright 1994, O'Reilly & Associates, Inc.
 * Permission to use, copy, and modify this program without
 * restriction is hereby granted, as long as this copyright
 * notice appears in each copy of the program source code.
 * This program is freely distributable without licensing fees and
 * is provided without guarantee or warrantee expressed or implied.
 * This program is -not- in the public domain.
 */

! menubar.uil - editor application main window MenuBar definitions

module editor_menubar
  objects = { 
    XmLabel         = gadget;
    XmCascadeButton = gadget;
    XmPushButton    = gadget;
    XmToggleButton  = gadget;
    XmSeparator     = gadget; 
  }

include file 'procedures.uih';

object menubar : exported XmMenuBar {
  controls {
    XmCascadeButton  file;
    XmCascadeButton  edit;
    XmCascadeButton  search;
  };
};

object file : XmCascadeButton {
  controls {
    file_menu : XmPulldownMenu {
      controls {
        XmPushButton  open;
        XmPushButton  save;
        XmSeparator   { };
        XmPushButton  exit;
      };
    };
  };
  arguments {
    XmNlabelString = "File";
    XmNmnemonic    = keysym ('F');
  };
};

object open : XmPushButton {
  arguments {
    XmNlabelString = "Open...";
    XmNmnemonic    = keysym ('O');
  };
  callbacks {
    XmNactivateCallback = procedure file_cb (FILE_OPEN);
  };    
};

object save : XmPushButton {
  arguments {
    XmNlabelString = "Save...";
    XmNmnemonic    = keysym ('S');
  };
  callbacks {
    XmNactivateCallback = procedure file_cb (FILE_SAVE);
  };    
};

object exit : XmPushButton {
  arguments {
    XmNlabelString     = "Exit";
    XmNmnemonic        = keysym ('x');
    XmNaccelerator     = 'Ctrl<Key>c';
    XmNacceleratorText = "Ctrl+C";
  };
  callbacks {
    XmNactivateCallback = procedure file_cb (FILE_EXIT);
  };    
};

object edit : XmCascadeButton {
  controls {
    edit_menu : XmPulldownMenu {
      controls {
        XmPushButton  cut;
        XmPushButton  copy;
        XmPushButton  paste;
        XmSeparator   { };
        XmPushButton  eclear;
      };
    };
  };
  arguments {
    XmNlabelString = "Edit";
    XmNmnemonic    = keysym ('E');
  };
};

object cut : XmPushButton {
  arguments {
    XmNlabelString     = "Cut";
    XmNmnemonic        = keysym ('t');
    XmNaccelerator     = 'Shift<Key>Delete';
    XmNacceleratorText = "Shift+Del";
  };
  callbacks {
    XmNactivateCallback = procedure edit_cb (EDIT_CUT);
  };    
};

object copy : XmPushButton {
  arguments {
    XmNlabelString     = "Copy";
    XmNmnemonic        = keysym ('C');
    XmNaccelerator     = 'Ctrl<Key>Insert';
    XmNacceleratorText = "Ctrl+Ins";
  };
  callbacks {
    XmNactivateCallback = procedure edit_cb (EDIT_COPY);
  };    
};

object paste : XmPushButton {
  arguments {
    XmNlabelString     = "Paste";
    XmNmnemonic        = keysym ('P');
    XmNaccelerator     = 'Shift<Key>Insert';
    XmNacceleratorText = "Shift+Ins";
  };
  callbacks {
    XmNactivateCallback = procedure edit_cb (EDIT_PASTE);
  };    
};

object eclear : XmPushButton {
  arguments {
    XmNlabelString = "Clear";
    XmNmnemonic    = keysym ('l');
  };
  callbacks {
    XmNactivateCallback = procedure edit_cb (EDIT_CLEAR);
  };    
};

object search : XmCascadeButton {
  controls {
    search_menu : XmPulldownMenu {
      controls {
        XmPushButton  find_next;
        XmPushButton  show_all;
        XmPushButton  replace;
        XmSeparator   { };
        XmPushButton  sclear;
      };
    };
  };
  arguments {
    XmNlabelString = "Search";
    XmNmnemonic    = keysym ('S');
  };
};

object find_next : XmPushButton {
  arguments {
    XmNlabelString     = "Find Next";
    XmNmnemonic        = keysym ('N');
    XmNaccelerator     = 'Ctrl<Key>N';
    XmNacceleratorText = "Ctrl+N";
  };
  callbacks {
    XmNactivateCallback = procedure search_cb (SEARCH_FIND_NEXT);
  };    
};

object show_all : XmPushButton {
  arguments {
    XmNlabelString     = "Show All";
    XmNmnemonic        = keysym ('A');
    XmNaccelerator     = 'Ctrl<Key>A';
    XmNacceleratorText = "Ctrl+A";
  };
  callbacks {
    XmNactivateCallback = procedure search_cb (SEARCH_SHOW_ALL);
  };    
};

object replace : XmPushButton {
  arguments {
    XmNlabelString     = "Replace Text";
    XmNmnemonic        = keysym ('R');
  };
  callbacks {
    XmNactivateCallback = procedure search_cb (SEARCH_REPLACE);
  };    
};

object sclear : XmPushButton {
  arguments {
    XmNlabelString = "Clear";
    XmNmnemonic    = keysym ('C');
  };
  callbacks {
    XmNactivateCallback = procedure search_cb (SEARCH_CLEAR);
  };    
};

end module;
