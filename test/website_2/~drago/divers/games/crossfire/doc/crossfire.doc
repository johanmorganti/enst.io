This files so far only concernes how to make archetypes,treasure and NPC's.

The name in parantheses is the name as it should be used in the archetype
file.
===========================================================================

Types (type):

Specified in defines.h.  It is used to group items together.  A type only
needs to be added for a new archetype if in some area of the program,
it is actually used.

 For example, if adding a new monster, there is no need to add a new type
in defines.h if crossfire never checks the type element in the object
structure for that new type.

 Most types are set for items that are applied, items that have special
properties.

------------------------------------------------------------------------------

Attack types (attacktype):

Physical	     1
Magic		     2
Fire		     4
Electricity	     8
Cold		    16
Confusion	    32
Acid		    64  Damages players equipment
Drain		   128
Weaponmagic	   256  (Special, use with care)
Ghosthit	   512  (Attacker dissolves)
Poison		  1024
Slow		  2048
Paralyze	  4096
Turn undead	  8192  
Fear		 16384
Cancellation	 32768
Depletion	 65536
Death		131072
Chaos		262144

Note that one archetype can have multiple attack types by adding
these values together.  Thus, something with an attacktype of 65
would attack with both acid and physical.

Immunity (immune), Protection (protected), and Vulnerable (vulnerable)
also use these values.  A create that is immune will take no damage
from that type, a protected creature takes half damage, and a vulnerable
creature takes double damage.

A few notes:  If a creature/object is immune to magic, then it will be 
immune to all damage from that attack, even if that attack type contains
more than just magic.

 Otherwise, a creature needs to be immune to all attack types in order
to take no damage (thus, a creature that is immune to physical, but
getting hit by a weapon that does physical and fire would take normal
damage).

 If an object is protected/vulnerable to just one of the attack types,
then the damage will be adjusted accordingly.  Thus, an object that
attacks with physical and fire will do half damage if the creature is
protected from either/both physical or fire.

------------------------------------------------------------------------------

Material types (material):

Paper	  1
Iron	  2
Glass	  4
Leather	  8
Wood	 16
Organic	 32
Stone	 64
Cloth	128
Adamantite 256

------------------------------------------------------------------------------
Pick Up specifiers (defined with pick_up)

Nothing 		 1
Wealth			 2
Food			 4
Weapon			 8
Armour			16
All but those defined	32
All			64

Note also that if can_use_armor, can_use_weapon, can_use_ring,
can_use_wand, can_cast_spell, can_use_bow are set, then the creature
will pick up the matching items even if the pick_up element is not
set to pick up those items.

------------------------------------------------------------------------------

Will_apply specifiers (will_apply):
   1    -       Handles
   2	-	Treasure (chests)
*  4    -       Scrolls (will also do so if can_use_scroll is set)
   4    -       Earthwall (tear down)
   8    -       Door      (open) */

 Yes, value 4 meant two things (apply scrolls or earthwalls).  The
meaning to apply scrolls is no longer supported, instead, 
can_use_scroll should be set instead to have monsters use scrolls.

------------------------------------------------------------------------------

Flags & specifications: (usage: flag value)
Note: the flags are case sensitive.
G = generator. O = object.

Flag syntax		Value
===========		=====
Object	<name>		name of O, internal refs only.
name	<name>		name of O as seen in the game.
race	<name>		race of O, internal.
slaying	<name>		Those O's with this race receives 2x damage.

other_arch <other obj>	which other O this G generates.
More			use between linked object defs.

anim			
 .			which bitmaps to use in animation of the O.
 .			If TEAR_DOWN flag is set, this contains the different
 .			stages of being destroyed.
<bmap internal no.>	Each no. is defined in file 'bmaps'.
 .
mina
end			terminates definition of this O.

last_heal <no>		Internal use (for regaining hit-points)
last_sp	  <no>		Internal use (for regaining spell-points)
last_eat  <no>		Internal use (for consuming food)

speed	  <no>		speed of O.  A negative number means that speed_left
			will be randomized when the object is loaded.
speed_left <no>		speed of O remaining, internal.
slow_move <no>		Slow-down factor for player walking on this O.		
face <bmap no>		bitmap first drawn for O.
Str,Dex,Con,
Wis,Cha,Int <no>	default ability for O.
hp,maxhp,sp,maxsp <no>	default value for O hitpoints, spellpoints.
maxsp                   In main.c:fire() which arrowtype to use
			Number equal to to the arrows type definition.

exp <no>		Xp gained for killing O.
food <no>		nutrition value for O. *DANGEROUS* as it's also
			used to contain internal values for non-edible
			objects. This should be changed in future.
dam,wc,ac <no>		default damage, weaponclass, armorclass. 
			dam 0 gives a 'friendly' monster ;)
wc			main.c:move_gate(). Is used by gates to indicate in 
			which position they are.
x,y <no>		relative coords for bmap when using large objects.
			x=y=0 is default, x=1 is second bmap in first row etc.
nrof <no>		No. of O:s.  0 means that objects of this type
			are not to be joined/split (it's a lone object).
level <no>		O:s level.
direction		In which direction (1=north, 8=north-west) this O is
			moving (flying).

type <no>		the object as defined in 'defines.h'
material <no>		the sum of materials in this O. (see materials.)
value <no>		the value for this O.
weight <no>		the weight for this O.
carrying 		sum of the weight of objects within this object.

immune <no>		attack immunity for this O. (no dam) (see attacks)
protected <no>		protection for this O. (1/2 dam) (weaker than immunity)
attacktype <no>		type of attack from O. (see attacks)
vulnerable <no>		special vulnerability of O. (2x dam) (see attacks)

invisible <1>		set if O is invisible.
magic <no>		magic modifier of O. (bracers +3 has magic 3)
state			internal.  Used when animating the object
alive <1>		set if O is alive (can be attacked).
applied			set if object is readied/worn/etc.
unpaid			set if object is unpaid (internal)
need_an <1>		object must be prepended with "an" instead of "a".
need_ie <1>		In plural, object must be appended by "ie"
			instead of "y"

no_pick <1>		set if O can't be taken.
no_pass <1>		set if O can't be passed. (eg, a closed door)
walk_on	<1>		O is applied by anything walking onto it.
walk_off <1>		O is applied by anything walking off it.
fly_on <1>		O is applied by anything flying onto it
fly_off <1>		O is applied by anything flying off it.
is_animated <1>		set if O is animated.

flying <1>		set if O is flying (used in fly_on/fly_off).
monster <1>		set if O is a monster.
friendly		Not used yet.
generator <1>		set if O is a generator.
auto_apply <1>		O is applied when it is loaded (for instance, some
			chests open automatically when the map is loaded)
treasure <1>		not used yet.

apply_once <1>		not used yet
see_invisible <1>	set if O can see invisible player.
can_roll <1>		set if O can be rolled.
is_turning <1>		set if O can turn sideways.
is_turnable <1>		set if O can be turned 'automagically'

is_used_up <1>		bizarre. O is used up after created, eg an explosion.
identified <1>		not used yet (looking forward to adding it -Frank 8)
reflecting <1>		set if O is reflective.
changing <1>		set if O will change appearance.
splitting <1>		set if O will divide.
hitback <1>		set if O hits when being hit.

blocksview <1>		set if O blocks line of sight.
editable <1>		Used by crossedit to determine which menu this
			object should be in, see editable.README for more.
undead <1>		set if O is undead.
scared <1>		internal (O is running away from players right now)
unaggressive <1>	internal (not used yet)

color_fg <no>		foreground color of O. Remember to set face/anim first!
color_bg <no>		background -"-         - "" -
reflect_missile <1>	set if O throws back missiles.
reflect_spell <1>	set if O throws back spells (some).
no_magic <1>		set if O totally resists magic (*use with care*)

tear_down <1>		set if O can be torn down (using animations and hp).
run_away <no %>		percentile of hp left which causes monster to flee.
 
pass_thru <1>		set if O can be passed thru by objects <below>.
can_pass_thru <1> 	set if O can pass thru objects <above>
pick_up <value>		Which items monster will pick up (see pickup (above))





Special use of flags in certain archetypes.
===========================================

In exits:

food  = The map which the exit leads to.
hp,sp = (x,y) of the destination on the new map.

In converters:

other_arch = which archetype to convert into
slaying    = which archetype to convert from
sp         = how many other_arch to create
food       = how many items are needed to convert into <sp> other_arch

HOW TO CREATE NEW ARCHETYPES AND BITMAPS:

 0) Figure out which directory/category the object will belong to.  This
    will determine the appropriate location for it inside the 'arch'
    directory.  For objects with many animations or that are very large,
    you may want to make a new subdirectory.
 1) create a bitmap.  It must be dividable by 24 in both height and width.
 2) create additional bitmaps if you want animation.
 3) split the bitmaps up into 24x24 bitmaps, if your bitmaps are larger.
    (you can use the script "splitxbm" which is included below).
 4) If possible, also create an X Pixmap file for each bitmap.  The
    name of each XPM file is the same as the bitmap file, with .xpm
    appended.
 5) Create an archetype entry.  The file should be called
    object.arc, where object is whatever the new object is.
    This is by far the most complicated step.  First read "crossfire.doc" for
    an introduction on how to create archetypes.
    Look at other similary archetypes to see how they have been done.
    If you only made one 24x24 bitmap, you will only need one archetype, but
    if you made a larger bitmap which is cut down to several 24x24 bitmaps,
    you will need to use "linked" archetypes.  How to do this is not
    documented yet, but try to study the other linked archetypes.
    If you have several bitmaps that should be animated, use the
    "anim" feature described in "crossfire.doc".

TREASURES:
==========

The treasures are kept in LIBDIR/treasures.  Their format is:

treasure <name>
  <item>
  more
  <item>
  end

And the format for an item is:

  arch <name>
  nrof <n (random 1 to n items generated)>
  magic <max-magic>
  chance <1-100%>
  yes
    <item>
  no
    <item>
  end (or "more", if this is not the last element)

If "magic" or "nrof" is omitted, it is set to 0.
If "chance" is ommitted, it is set to 100%.
"yes" tells what can be generated if this item was generated.
"no" tells what can be generated if this item was not generated.
"yes" and "no" can of course be omitted.

To use such a treasure, just put "randomitem <name>" into any
archetype in the archetype-file.  Random treasure will then be generated
whenever such a monster is generated by generator, or when a map
containing such <monsters> is loaded for the first time.

NPC's and their life:
=====================

An NPC can have any combination of the following programs (flags):

FLAGS: (They are checked in the following order:)
  - sleep		(will stand still until woken)
  - scared		(will run away)
  - random_movement	(move randomly)
  - friendly		(will attack enemies of the nearest player)
  - unaggressive	(don't attack until attacked)
  - stand_still		(don't ever move)

sleep + (any)		= sleep until woken, then do any of the other things...
neutral + random_movement = move randomly around all the time.
neutral (alone)		= stand still until attacked, then attack and move.
stand_still + (any)	= do anything except moveing

In addition it can have run_away set to which percentage of full
hit-points the npc will run away at.

And then there is the NPC features made by Karl Holland:

Set the variable attack_type to one of the below (cut from define.h):
/******************************************************************************/
/* Monster Movements added by kholland@sunlab.cit.cornell.edu                 */
/******************************************************************************/
/* if your monsters start acting wierd, mail me                               */
/******************************************************************************/
/* the following definitions are for the attack_movement variable in monsters */
/* if the attack_variable movement is left out of the monster archetype, or is*/
/* set to zero                                                                */
/* the standard mode of movement from previous versions of crossfire will be  */
/* used. the upper four bits of movement data are not in effect when the monst*/
/* er has an enemy. these should only be used for non agressive monsters.     */
/* to program a monsters movement add the attack movement numbers to the movem*/
/* ment numbers example a monster that moves in a circle until attacked and   */
/* then attacks from a distance:                                              */
/*                                                      CIRCLE1 = 32          */
/*                                              +       DISTATT = 1           */
/*                                      -------------------                   */
/*                      attack_movement = 33                                  */
/******************************************************************************/
#define DISTATT 1  /* move toward a player if far, but mantain some space, */
                   /* attack from a distance - good for missile users only */
#define RUNATT  2  /* run but attack if player catches up to object        */
#define HITRUN  3  /* run to then hit player then run away cyclicly        */
#define WAITATT 4  /* wait for player to approach then hit, move if hit    */
#define RUSH    5  /* Rush toward player blindly, similiar to dumb monster */
#define ALLRUN  6  /* always run never attack good for sim. of weak player */
#define DISTHIT 7  /* attack from a distance if hit as recommended by Frank*/
#define WAIT2   8  /* monster does not try to move towards player if far   */
                   /* maintains comfortable distance                       */
#define PETMOVE 16 /* if the upper four bits of move_type / attack_movement*/
                   /* are set to this number, the monster follows a player */
                   /* until the owner calls it back or off                 */
                   /* player followed denoted by 0b->owner                 */
                   /* the monster will try to attack whatever the player is*/
                   /* attacking, and will continue to do so until the owner*/
                   /* calls off the monster - a key command will be        */
                   /* inserted to do so                                    */
#define CIRCLE1 32 /* if the upper four bits of move_type / attack_movement*/
                   /* are set to this number, the monster will move in a   */
                   /* circle until it is attacked, or the enemy field is   */
                   /* set, this is good for non-aggressive monsters and NPC*/ 
#define CIRCLE2 48 /* same as above but a larger circle is used            */
#define PACEH 64   /* The Monster will pace back and forth until attacked  */
                   /* this is HORIZONTAL movement                          */
#define PACEH2  80 /* the monster will pace as above but the length of the */
                   /* pace area is longer and the monster stops before     */
                   /* changing directions                                  */
                   /* this is HORIZONTAL movement                          */
#define RANDO   96 /* the monster will go in a random direction until      */
                   /* it is stopped by an obstacle, then it chooses another*/
                   /* direction.                                           */
#define RANDO2 112 /* constantly move in a different random direction      */
#define PACEV 128  /* The Monster will pace back and forth until attacked  */
                   /* this is VERTICAL movement                            */
#define PACEV2 144 /* the monster will pace as above but the length of the */
                   /* pace area is longer and the monster stops before     */
                   /* changing directions                                  */
                   /* this is VERTICAL movement                            */

The message structure in a monster can contain:
@match <key>|<key>[...]
  [text]
[...]

This identifies what the monster will say if talked to with a text
which matches any keys.
A key contaning '*' will match anything.

An example of usage:
@match hello|hi
Welcome, good friend!
@match bye
Goodbye!
@match *
What did you say?

Obviously this feature can be expanded extensively, so expect it
to evolve till the next version.
