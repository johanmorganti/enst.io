/**************************************************************************
         serveur avec gestion du signal SIGPOLL                     
****************************************************************************/

#include <sys/signal.h>
#include <fcntl.h>
#include <sys/file.h>
#include <stropts.h>

#include <sys/socket.h>
#include <netinet/in.h>
#include <stdio.h>


#define MESSAGE_OK	"Ici serveur : messages bien recus\n"
#define MESSAGE_ERR	"Ici serveur : probleme de communication\n"

int sock_ecou ; /* socket (sert a ouvre_socket et Traite_POLL ) */

/* ======================================================================== */
/* ======================================================================== */

void ouvrir_socket(int port)
{  
  struct sockaddr_in server;

  sock_ecou = socket(AF_INET,SOCK_STREAM,0);

  memset(&server, '\0', sizeof(server));
  server.sin_family = AF_INET;
  server.sin_addr.s_addr = INADDR_ANY;
  server.sin_port = htons(port);

  if (bind(sock_ecou,(struct sockaddr*) &server,sizeof(server)) < 0) {  
    perror ("Erreur lors du bind\n") ;
    exit(-4);
  }
  
/** POUR GERER SIGPOLL (SOLARIS) 
                     VOIR man ioctl et man streamio
*/

  fprintf(stderr,"ioctl : %d\n",ioctl (sock_ecou,... ,... )) ;
  
 fprintf (stderr, " socket ouvert\n");
  listen(sock_ecou, 5);
}

/* ======================================================================== */
/* ======================================================================== */

void lecture_socket(int Sock_Com)
{
char MESSAGE [] = "Reponse de pid                            \n";
int pid;
int Ret_Read;
char Buf[1024];

close (sock_ecou ) ;
if (write (Sock_Com,"Debut de comm.\n",15) < 0 )
    perror ("Erreur ecriture Message") ;
do
    {
    memset(Buf, 0, sizeof (Buf)) ;
    if ((Ret_Read=read (Sock_Com,Buf,sizeof (Buf))) < 0)
        {
        perror ("Erreur lecture Message") ;
        printf (" *************************************\n");
        continue;
        }
    if (Ret_Read == 0 )
        {
        printf (" Ici, pid %d : Fin de connexion \n", getpid()) ;
        printf (" *************************************\n");
        }
    else
        {
        printf("Ici %d, fils du serveur %d, lit :\n",getpid(),getppid());
        printf("%s\n", Buf );
        }
    }
 while (Ret_Read > 0) ;

sprintf (MESSAGE+15, " %d fils de %d",getpid(), getppid());
if (write (Sock_Com, MESSAGE, strlen(MESSAGE) ) < 0)
    {
    printf ("Ici pid %d : ", getpid()) ;
    perror ("Erreur ecriture d'un message") ;
    exit (2) ;
    }

}

/* ======================================================================== */
/* fonction de traitement du signal SIGPOLL */
/* ======================================================================== */

void Traite_POLL(int sig)
{
  int sock_comm;
  
	sigset_t Masque,Vieux_Masque;

  /* on bloque le signal SIGPOLL, ainsi que SIGINT*/ 
  sigemptyset(&Masque);
  sigaddset(&Masque,SIGINT);
  sigaddset(&Masque,SIGPOLL);
  sigprocmask(SIG_BLOCK,&Masque,&Vieux_Masque); 
 fprintf (stderr, " recu signal numero %d\n", sig);

  ... = accept(..., (struct sockaddr *)0, (int *)0); 
  if (sock_comm < 0) {
      perror ("erreur sur accept\n");
      exit(-3);
    }
  lecture_socket(...);
  
  shutdown(sock_comm,2); 
 
	fprintf (stderr, " Fin de dialogue \n");

  /* rearmer le signal*/
  signal(sig,Traite_POLL);

  /* on retire le masque */
  sigprocmask(SIG_UNBLOCK,&Masque,&Vieux_Masque);

}

/* ======================================================================== */
/* ======================================================================== */

void main(int argc, char *argv[])
{
    int i, port;     /* port du serveur */
    unsigned long ibid, jbid;
    
  if (argc != 2) {
      printf("Usage: %s port\n", argv[0]);
      exit(1);
  }

    port = atoi(argv[1]);
  
    ouvrir_socket(port);
    
	/* fournir le traitement associe a SIGPOLL */
  signal(SIGPOLL, ...);

 /*Ici, faire un traitement (!!  sans etre bloque par les e/s reseau */

  while (1) {
	ibid=jbid=0;
    for (ibid=0; ibid<100000; ibid++) for (jbid=0; jbid<500; jbid++); 
	printf ("Ici serveur : je travaille\n");
  }
    fprintf(stderr,"Ici serveur : fin \n");
}


/* ======================================================================== */
/* ======================================================================== */
