/*--------------------------------------------------------
 *  Ce programme parallelise le  produit de matrice C = A* B.
 *  Hypotheses : il y a NCPU processeurs,
 *  et les matrices sont de dimension DIM*DIM.
 *  La fonction main va attacher un thread a chacun des processeurs 
 *  et chacun de ces threads
 *  sera dedie a la construction d'une ligne de la matrice C.
 *  Des qu'un thread a fini le calcul d'une ligne, il va voir s'il
 *  reste des lignes a calculer, si oui il en recalcule une.
 *
 *  La synchro. est faite par var. conditionnelles. 
 *  cond_fin sert a bloquer main, elle est signalee par le 
 *  thread qui fait la derniere ligne.
 *  cond_depart sert a bloquer les threads tant qu'ils n'ont
 *  pas tous ete crees.
 *  =============================
 *  Fonctionnement de cond_wait :
 *  =============================
 *   si la cond. n'est pas realisee, on rend le verrou et on se bloque sur 
 *   la var. cond. (de facon ATOMIQUE),
 *   quand la var. cond. change d'etat on se debloque et on reprend le verrou
 *   et on evalue a nouveau la var. cond.
 *--------------------------------------------------------
 */

#include <stdio.h>
#include <thread.h>
#include <synch.h>
#include <sys/types.h>
#include <unistd.h>
#include <string.h>

#define DIM 6
#define NCPU 3

/************  Matrices servant a faire C = A * B   ******/
int Mat_A [DIM] [DIM] = { {1,2,3,4,5,6}, {1,2,3,4,5,6},  {1,2,3,4,5,6},
                          {1,2,3,4,5,6}, {1,2,3,4,5,6},  {1,2,3,4,5,6}  };
int Mat_B [DIM] [DIM] = { {1,2,3,4,5,6}, {1,2,3,4,5,6},  {1,2,3,4,5,6},
                          {1,2,3,4,5,6}, {1,2,3,4,5,6},  {1,2,3,4,5,6}  };

int Mat_C [DIM] [DIM];


/************  outils de synchronisation      ********/
struct {
  mutex_t verrou;
  cond_t cond_depart,       /* Les deux var. conditionnelles  */
         cond_fin;
  int    lig,               /* numero de la prochaine ligne a calculer */
         a_faire,           /* nbre de lignes a calculer */
         pas_fait,          /* nbre de lignes a faire, quand il passe
                               a zero, on reveille main      */
         operateurs;        /* nombre de threads crees. Utile
                               si plusieurs executions successives  */
} travail;


/*---------------------------------------
 *     main 
 *---------------------------------------
 */

void main ( void )
{
  
  int i,j;
  char Rep[10];
  void mulmat (void);

  do
    {

/*---- Creer les threads pour paralleliser  le produit C = A * B -----*/
      mulmat ();

/*----   Visualisation   des resultats  ------*/      
      for (i=0; i<DIM; i++)
	{
	  for (j=0; j<DIM; j++)
	    printf ("Mat_C[%d,%d] = %d\n", i, j, Mat_C[i][j]);
	  printf ("\n");
	}

/*---   Remise a zero de la matrice produit  -----*/
      for (i=0; i<DIM; i++)
	for (j=0; j<DIM; j++) Mat_C[i][j]=0;

      printf ("Faire un autre calcul ? (fin --> arret)\n");
      fgets(Rep, sizeof(Rep), stdin);
    }
  while ( strncmp(Rep, "fin",3) ) ;

}

/*------------------------------------------------------------------------
 * On va creer NCPU threads, chacun etant lie a un lwp (option THR_NEW_LWP).
 * On suivra l execution du programme en utilisant la commande truss -l.
 *
 *------------------------------------------------------------------------
 */

void mulmat ( )
{
  int i, pid ;
  thread_t tid, tid_main;
  void operateur (void);

  tid_main = thr_self();
  pid =getpid();

   mutex_lock (&travail.verrou);

  if (travail.operateurs == 0)
    {
      for (i =0; i< NCPU; i++)
	{
	  thr_create (NULL, (size_t)NULL, 
                      (void *)operateur, (void *)NULL, THR_NEW_LWP, &tid);
	  printf("Thread %d cree par %d (pid %d)\n",tid ,tid_main, pid);
	}
      travail.operateurs = NCPU;
    }

  travail.lig = 0;
  travail.pas_fait = travail.a_faire = DIM;
  
  /* Le broadcast suivant debloque les threads qui attendent sur
     la condition de depart. On attend ensuite qu'ils aient tous
     termine leur travaux, chaque thread calculant plusieurs lignes
     de la matrice C.
  */

  cond_broadcast ( ... );
  while (travail.pas_fait)
    cond_wait ( ... , ... );

  printf("Thread %d (pid %d) a recu tous les resultats\n",tid_main,pid);
  mutex_unlock(&travail.verrou);
 
}

/*---------------------------------------
 * Fonction executee par chacun des threads  :
 * chacun calcule au moins une ligne de la matrice. 
 *---------------------------------------
 */

void operateur (void)
{
  int i, j, lig, resultat;
  
  printf ("Thread %d pret\n", thr_self());
  
  while (1)
    {
      mutex_lock (&travail.verrou);
      while (travail.a_faire == 0)
	cond_wait ( ... , ...  );

      travail.a_faire--;
      lig=travail.lig++;
      mutex_unlock(&travail.verrou);
      
      printf ("Thread %d va calculer la ligne %d\n", thr_self(),lig);
      
      for (j=0; j< DIM; j++)
	{
	  for (resultat=0, i=0; i< DIM; i++)
	    resultat += Mat_A[lig][i] * Mat_B[i][j];
	  Mat_C[lig][j]=resultat;
	}

   /*******  pour simuler un calcul long   !!!!!!!!!*****/
      for (i=0; i<0x7FFFF; i++);

      printf ("Le thread %d a fait la ligne %d \n", thr_self(), lig);
     
      mutex_lock(&travail.verrou);
      travail.pas_fait--;

      /* Fin des calculs ? Le premier thread qui fait passer la 
         variable travail.pas_fait a zero avertit le thread principal  */
      if (travail.pas_fait == 0)
	cond_signal( ... );
      
      mutex_unlock(&travail.verrou);
    }
}













