%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 20 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /Helvetica-BoldOblique FMFONTDEFINE
2 0 /Helvetica FMFONTDEFINE
3 0 /Courier-Bold FMFONTDEFINE
4 0 /Helvetica-Oblique FMFONTDEFINE
5 0 /Courier FMFONTDEFINE
6 0 /Times-BoldItalic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "mini" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
27 0.39 639 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
0.44 (                                                            LANGAGE C                                                           1) 43.88 781.66 S
0 0 0 1 0 0 0 K
42.66 475.36 273.58 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 458.11 T
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 R
7 X
0 0 0 1 0 0 0 K
V
158.41 468.76 160.52 470.87 R
0 X
V
-0.07 H
0 Z
N
27 0.39 639 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 581.47 TF
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 26.09 Q
(Langage C) 57.44 734.98 T
0 15.66 Q
(---------------------------------------) 57.88 720.63 T
(_______________________) 58.31 507.11 T
(E. Lecolinet                ENST) 57.88 489.71 T
0 0 0 1 0 0 0 K
293.15 0.39 905.15 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
0.44 (                                                            LANGAGE C                                                           2) 310.03 781.66 S
0 0 0 1 0 0 0 K
308.81 475.36 539.72 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 458.11 T
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 R
7 X
0 0 0 1 0 0 0 K
V
424.56 468.76 426.66 470.87 R
0 X
V
-0.07 H
0 Z
N
293.15 0.39 905.15 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 581.47 TF
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 15.66 Q
(Aper\215u) 324.46 746.73 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
409.13 690.17 324.46 690.17 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Un programme C) 324.46 691.06 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
( comprend :) 409.13 691.06 T
(\321 un ou plusieurs) 324.46 669.32 T
0 F
(\336chiers) 411.47 669.32 T
2 F
( C) 448.6 669.32 T
(\321 d\216\336nissant des) 324.46 648.44 T
0 F
(fonctions) 410.32 648.44 T
2 F
(\321 au moins une fonction nomm\216e) 324.46 627.57 T
0 F
(main) 486.31 627.57 T
2 F
(\050\051) 510.67 627.57 T
(    \050= la 1\217re fonction appel\216e\051) 324.46 611.91 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
383.03 571.88 324.46 571.88 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Un \336chier C) 324.46 572.78 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
( comprend :) 383.03 572.78 T
(\321 des inclusions de ") 324.46 551.03 T
0 F
(headers") 424.46 551.03 T
2 F
-0.28 (\321 des) 324.46 530.16 P
0 F
-0.28 (variables) 356.97 530.16 P
2 F
-0.28 ( globales \050\216ventuellement\051) 402.23 530.16 P
(\321 des d\216\336nitions de) 324.46 509.28 T
0 F
(fonctions) 421.92 509.28 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
27 -389.06 639 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
0.44 (                                                            LANGAGE C                                                           3) 43.88 392.21 S
0 0 0 1 0 0 0 K
42.66 85.91 273.58 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 68.66 T
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 R
7 X
0 0 0 1 0 0 0 K
V
158.41 79.31 160.52 81.42 R
0 X
V
-0.07 H
0 Z
N
27 -389.06 639 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 192.02 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
97.33 359.87 54.4 359.87 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Exemple) 54.4 360.76 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(un seul \336chier "hello.c" :) 54.4 344.23 T
3 9.57 Q
(#include <stdio.h>) 54.4 323.5 T
(main\050\051) 54.4 303.5 T
({) 54.4 293.49 T
(   printf\050"hello word\134n"\051;) 54.4 283.49 T
(}) 54.4 273.49 T
2 10.44 Q
(NB:  stdio.h = header standard pour les E/S) 54.4 241.6 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
58.31 101.57 265.75 226.81 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
58.31 101.57 265.75 226.81 R
7 X
0 0 0 1 0 0 0 K
V
70.06 125.05 117.02 195.5 R
V
0.22 H
2 Z
0 X
N
132.68 125.05 179.64 195.5 R
7 X
V
0 X
N
195.3 125.05 246.18 195.5 R
7 X
V
0 X
N
2 8.7 Q
(\336chier1.c) 78.31 205.24 T
(\336chier2.c) 140.93 205.24 T
(\336chier2.c) 207.04 205.24 T
(fonction1\050\051) 73.97 175.93 T
(fonction2\050\051) 73.97 160.28 T
0 F
(main) 73.97 140.71 T
2 F
(\050\051) 94.27 140.71 T
(fonction5\050\051) 199.21 179.85 T
(fonction6\050\051) 199.21 152.45 T
(fonction3\050\051) 136.59 175.93 T
(fonction4\050\051) 136.59 152.45 T
(.......) 199.21 132.88 T
27 -389.06 639 402.94 C
293.15 -389.06 905.15 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
0.44 (                                                            LANGAGE C                                                           4) 310.03 392.21 S
0 0 0 1 0 0 0 K
308.81 85.91 539.72 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 68.66 T
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 R
7 X
0 0 0 1 0 0 0 K
V
424.56 79.31 426.66 81.42 R
0 X
V
-0.07 H
0 Z
N
293.15 -389.06 905.15 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 192.02 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
394.77 359.87 320.55 359.87 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Une fonction C) 320.55 360.76 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
( comprend :) 394.77 360.76 T
(\321 un) 320.55 339.01 T
0 F
(en-t\220te) 348.39 339.01 T
2 F
( :) 382.61 339.01 T
(  \050valeur retourn\216e, nom, arguments\051) 326.53 328.58 T
(\321 un) 320.55 307.7 T
0 F
(bloc) 348.39 307.7 T
2 F
( :) 369.85 307.7 T
(    d\216limit\216 par les symboles) 320.55 292.05 T
0 F
({) 455.11 292.05 T
2 F
(  et) 459.17 292.05 T
0 F
(}) 479.48 292.05 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
358.82 258.1 320.55 258.1 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(Un bloc) 320.55 258.99 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
( comprend :) 358.82 258.99 T
(\321 des) 320.55 237.25 T
0 F
(d\216clarations) 353.61 237.25 T
2 F
( \050de variables ...\051) 415.1 237.25 T
(\321 des) 320.55 216.38 T
0 F
(instructions) 353.61 216.38 T
2 F
(\321 d\325autres) 320.55 195.5 T
0 F
(blocs) 373.91 195.5 T
FMENDPAGE
%%EndPage: "mini" 1
%%Page: "mini" 2
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 0.39 639 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
0.44 (                                                            LANGAGE C                                                           5) 43.88 781.66 S
0 0 0 1 0 0 0 K
42.66 475.36 273.58 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 458.11 T
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 R
7 X
0 0 0 1 0 0 0 K
V
158.41 468.76 160.52 470.87 R
0 X
V
-0.07 H
0 Z
N
27 0.39 639 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 581.47 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
100.8 749.31 54.4 749.31 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Exemple:) 54.4 750.2 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
( programme "hello_you":) 100.8 750.2 T
(Fichier "hello_you.c" avec 2 fonctions :) 54.4 726.72 T
3 9.57 Q
(#include <stdio.h>) 54.4 705.56 T
(foo\050char *name\051) 54.4 685.55 T
({) 54.4 675.55 T
(   printf\050"hello %s \134n", name\051;) 54.4 665.55 T
(}) 54.4 655.55 T
(main\050\051) 54.4 635.54 T
({) 54.4 625.54 T
(  char *name;) 54.4 615.54 T
(  name = "hubert";) 54.4 595.53 T
(  foo\050name\051;) 54.4 585.53 T
(  dupondt\050\051;) 54.4 575.53 T
(}) 54.4 565.53 T
(____________________________________) 54.4 555.53 T
2 10.44 Q
(Fichier "dupondt.c" avec 1 fonction :) 54.4 540.16 T
3 9.57 Q
(dupondt\050\051) 54.4 518.99 T
({) 54.4 508.99 T
(   foo\050"dupondt"\051;) 54.4 498.99 T
(}) 54.4 488.99 T
293.15 0.39 905.15 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
0.44 (                                                            LANGAGE C                                                           6) 310.03 781.66 S
0 0 0 1 0 0 0 K
308.81 475.36 539.72 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 458.11 T
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 R
7 X
0 0 0 1 0 0 0 K
V
424.56 468.76 426.66 470.87 R
0 X
V
-0.07 H
0 Z
N
293.15 0.39 905.15 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 581.47 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
360.57 749.31 320.55 749.31 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Syntaxe) 320.55 750.2 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\321 commentaires entre:) 320.55 724.98 T
0 F
(/*) 446.42 724.98 T
4 F
(et) 459.18 724.98 T
0 F
(*/) 473.69 724.98 T
2 F
(\321 nom de header entre:) 320.55 703.67 T
0 F
( <) 442.38 703.67 T
4 F
(et) 454.28 703.67 T
0 F
(>) 468.78 703.67 T
2 F
(  ou) 474.88 703.67 T
0 F
( ") 498.09 703.67 T
4 F
(et) 508.84 703.67 T
0 F
(") 523.35 703.67 T
2 F
(\321) 320.55 682.36 T
2 7.83 Q
(CHA\353NES) 333.89 682.36 T
2 10.44 Q
( de caract\217res entre:) 368.68 682.36 T
0 F
(") 476 682.36 T
4 F
(et) 486.75 682.36 T
0 F
(") 501.26 682.36 T
2 F
(\321) 320.55 661.05 T
2 7.83 Q
(UN) 333.89 661.05 T
2 10.44 Q
( caract\217re entre:) 345.19 661.05 T
0 F
( \325) 444.39 661.05 T
4 F
( et) 453.1 661.05 T
0 F
(\325) 470.51 661.05 T
2 F
(\321) 320.55 639.74 T
0 F
({) 333.89 639.74 T
2 F
(   et) 337.95 639.74 T
0 F
(}) 364.06 639.74 T
2 F
(   pour d\216limiter les blocs) 368.12 639.74 T
(\245) 320.55 601.91 T
(T) 326.52 601.91 T
(outes les variables doivent \220tre d\216clar\216es) 331.74 601.91 T
(  avant utilisation) 320.55 586.26 T
(\245) 320.55 547.55 T
(Fonction main = 1ere fonction appel\216e) 326.52 547.55 T
(  quand on ex\216cute le programme) 320.55 531.9 T
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
27 -389.06 639 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
0.44 (                                                            LANGAGE C                                                           7) 43.88 392.21 S
0 0 0 1 0 0 0 K
42.66 85.91 273.58 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 68.66 T
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 R
7 X
0 0 0 1 0 0 0 K
V
158.41 79.31 160.52 81.42 R
0 X
V
-0.07 H
0 Z
N
27 -389.06 639 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 192.02 TF
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 15.66 Q
(T) 54.4 357.28 T
(ypes, Op\216rateurs) 62.81 357.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(et Expressions) 54.4 341.62 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
60.78 306.81 54.4 306.81 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(T) 54.4 307.7 T
0 1 1 0 1 0 0 K
125.56 306.81 60 306.81 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(ypes de base) 60 307.7 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\245) 54.4 285.96 T
(char     : caract\217re \0501 byte\051) 60.38 285.96 T
(\245) 54.4 271.17 T
(int        : entier) 60.38 271.17 T
(\245) 54.4 256.39 T
(\337oat     : \337ottant simple pr\216cision) 60.38 256.39 T
(\245) 54.4 241.6 T
(double : \337ottant double pr\216cision) 60.38 241.6 T
(Les tailles varient suivant le compilateur) 54.4 215.51 T
(.) 238.28 215.51 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
108.92 181.57 54.4 181.57 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Quali\336eurs) 54.4 182.46 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\245) 54.4 160.71 T
(short int) 60.38 160.71 T
(\245) 54.4 145.93 T
(long int) 60.38 145.93 T
(\245) 54.4 131.14 T
(long double) 60.38 131.14 T
(\245) 54.4 116.36 T
(signed) 60.38 116.36 T
(\245) 54.4 101.57 T
(unsigned) 60.38 101.57 T
293.15 -389.06 905.15 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
0.44 (                                                            LANGAGE C                                                           8) 310.03 392.21 S
0 0 0 1 0 0 0 K
308.81 85.91 539.72 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 68.66 T
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 R
7 X
0 0 0 1 0 0 0 K
V
424.56 79.31 426.66 81.42 R
0 X
V
-0.07 H
0 Z
N
293.15 -389.06 905.15 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 192.02 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
358.25 359.87 320.55 359.87 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(R\217gles:) 320.55 360.76 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\321 short <= int <= long) 320.55 339.45 T
(\321 short >= 16 bits) 320.55 325.1 T
(\321 long  >= 32 bits) 320.55 310.74 T
(\321 cf. <limits.h> et <\337oat.h>) 320.55 296.39 T
(    \050headers standards dans:  /usr/include\051) 320.55 280.74 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
360.56 246.8 320.55 246.8 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Sur Sun) 320.55 247.69 T
2 F
( \050avec cc et gcc\051 :) 360.56 247.69 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\321 short = 16 bits,) 320.55 226.38 T
(\321) 320.55 212.03 T
(int = long = 32 bits) 333.89 212.03 T
(\321 \337oat = 32 bits) 320.55 197.68 T
(\321 long = 64 bits) 320.55 183.33 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
366.95 155.47 320.55 155.47 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Exemple:) 320.55 156.36 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\245) 320.55 141.14 T
(signed char       : de 0 \210 255) 326.52 141.14 T
(\245) 320.55 126.79 T
(unsigned char   : de -128 \210 127) 326.52 126.79 T
(\245) 320.55 112.44 T
(char                   : d\216pend du compilateur) 326.52 112.44 T
(                            \050de -128 \210 127 sur Sun\051) 326.53 102.01 T
FMENDPAGE
%%EndPage: "mini" 2
%%Page: "mini" 3
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 0.39 639 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
0.44 (                                                            LANGAGE C                                                           9) 43.88 781.66 S
0 0 0 1 0 0 0 K
42.66 475.36 273.58 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 458.11 T
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 R
7 X
0 0 0 1 0 0 0 K
V
158.41 468.76 160.52 470.87 R
0 X
V
-0.07 H
0 Z
N
27 0.39 639 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 581.47 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
111.23 749.31 54.4 749.31 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Constantes) 54.4 750.2 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\245) 54.4 728.9 T
(1234   --> int) 60.38 728.9 T
(\245) 54.4 714.54 T
(037     --> int \050en octal\051) 60.38 714.54 T
(\245) 54.4 700.19 T
(0x1f    --> int \050en hexad\216cimal\051) 60.38 700.19 T
(\245) 54.4 673.23 T
(1.234  --> double) 60.38 673.23 T
(\245) 54.4 658.88 T
(1e-2    --> double) 60.38 658.88 T
(\245) 54.4 631.92 T
(\325a\325       --> caract\217re) 60.38 631.92 T
(\245) 54.4 617.13 T
("abcd" --> string \050cha\224ne de caract\217res\051) 60.38 617.13 T
(Constante caract\217re  = valeur enti\217re) 54.4 584.95 T
(Exemple \050en ASCII\051 :) 54.4 556.68 T
(\245) 54.4 541.9 T
(\325A) 60.38 541.9 T
(\325   = le caract\217re A; valeur = 65) 68.88 541.9 T
(\245) 54.4 527.55 T
(\3250\325   = le caract\217re 0 \050z\216ro\051; valeur = 48) 60.38 527.55 T
(Constante string = tableau de caract\217res) 54.4 500.15 T
293.15 0.39 905.15 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           10) 308.81 781.66 B
0 0 0 1 0 0 0 K
308.81 475.36 539.72 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 458.11 T
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 R
7 X
0 0 0 1 0 0 0 K
V
424.56 468.76 426.66 470.87 R
0 X
V
-0.07 H
0 Z
N
293.15 0.39 905.15 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 581.47 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
422.07 749.31 320.55 749.31 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Caract\217res sp\216ciaux) 320.55 750.2 T
0 0 0 1 0 0 0 K
2 7.83 Q
0 0 0 1 0 0 0 K
(\245) 320.55 731.5 T
(\325\1340\325     = le caract\217re NUL; valeur = 0) 326.52 731.5 T
(\245) 320.55 720.63 T
(\325\134n\325     = new line,       \325\134t\325 = tabulation,       etc ...) 326.52 720.63 T
(\245) 320.55 709.76 T
(\325\134ooo\325 = caract\217re d\216\336ni en octal) 326.52 709.76 T
(   exemple :    \325\134007\325  = caract\217re BELL \050bip clavier\051) 320.55 701.5 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
435.95 668.86 320.55 668.86 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(De\336nition de constante) 320.55 669.75 T
0 0 0 1 0 0 0 K
3 9.57 Q
0 0 0 1 0 0 0 K
(#def) 320.55 649.02 T
(ine MAX_VAL  255) 343.51 649.02 T
(#def) 320.55 639.02 T
(ine BELL     \325\134007\325) 343.51 639.02 T
(#def) 320.55 629.02 T
(ine MESSAGE  "hello word") 343.51 629.02 T
2 10.44 Q
(Concat\216nation implicite:) 320.55 604.09 T
2 8.7 Q
(       "hello word"   <-->  "hello " "word") 320.55 589.59 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
390.14 556.23 320.55 556.23 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Enum\216rations) 320.55 557.12 T
0 0 0 1 0 0 0 K
3 9.57 Q
0 0 0 1 0 0 0 K
(enum boolean {NO, YES};) 320.55 536.39 T
(enum semaine {LUN=1, MAR, MER, ...};) 320.55 526.39 T
2 10.44 Q
(\245) 320.55 504.93 T
(commence implicitement \210 0) 326.52 504.93 T
(\245) 320.55 490.15 T
(mais on peut pr\216ciser les valeurs par  =) 326.52 490.15 T
27 -389.06 639 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           1) 42.66 392.21 B
-0 0.44 (1) 270.72 392.21 B
0 0 0 1 0 0 0 K
42.66 85.91 273.58 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 68.66 T
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 R
7 X
0 0 0 1 0 0 0 K
V
158.41 79.31 160.52 81.42 R
0 X
V
-0.07 H
0 Z
N
27 -389.06 639 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 192.02 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
180.28 359.87 54.4 359.87 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(D\216clarations de variables) 54.4 360.76 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\245) 54.4 333.79 T
(doivent \220tre d\216clar\216es) 60.38 333.79 T
0 F
(avant) 165.96 333.79 T
2 F
( utilisation) 193.22 333.79 T
(\245) 54.4 319.01 T
(d\216claration termin\216e par un) 60.38 319.01 T
0 F
(;) 193.22 319.01 T
3 9.57 Q
(char c, rep;) 54.4 292.19 T
(int  i, res, truc;) 54.4 282.19 T
(int  vect[1000], mat[5][10];) 54.4 272.19 T
2 10.44 Q
(\245) 54.4 248.12 T
(vecteur de 1000 entiers) 60.38 248.12 T
(\245) 54.4 233.34 T
(matrice de 5 lignes et 10 colonnes) 60.38 233.34 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
201.15 200.27 54.4 200.27 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(D\216claration avec initialisation) 54.4 201.16 T
0 0 0 1 0 0 0 K
3 9.57 Q
0 0 0 1 0 0 0 K
(int i = 5;) 54.4 179.99 T
(char new_line = \325\134n\325;) 54.4 169.99 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
61.36 137.21 54.4 137.21 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(V) 54.4 138.1 T
0 1 1 0 1 0 0 K
194.79 137.21 60.79 137.21 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(ariables \210 valeur constante) 60.79 138.1 T
2 F
( \050ANSI C\051) 194.79 138.1 T
0 0 0 1 0 0 0 K
3 9.57 Q
0 0 0 1 0 0 0 K
(const f) 54.4 119.98 T
(loat pi = 3.14;) 94.58 119.98 T
2 10.44 Q
(V) 54.4 98.53 T
(ariable qui ne doit pas changer de valeur) 60.59 98.53 T
(.) 248.56 98.53 T
293.15 -389.06 905.15 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           12) 308.81 392.21 B
0 0 0 1 0 0 0 K
308.81 85.91 539.72 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 68.66 T
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 R
7 X
0 0 0 1 0 0 0 K
V
424.56 79.31 426.66 81.42 R
0 X
V
-0.07 H
0 Z
N
293.15 -389.06 905.15 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 192.02 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
444.09 359.87 320.55 359.87 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Affectation des variables) 320.55 360.76 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\245) 320.55 338.58 T
(variables pr\216alablement d\216clar\216es) 326.52 338.58 T
(\245) 320.55 323.79 T
(af) 326.52 323.79 T
(fectation --> signe) 335.04 323.79 T
0 F
(=) 426.51 323.79 T
2 F
(\245) 320.55 309.01 T
(toute instruction se termine par un) 326.52 309.01 T
0 F
(;) 490.11 309.01 T
2 F
(Syntaxe:) 320.55 283.78 T
(       nom_de_variable) 320.55 267.26 T
0 F
(=) 426.71 267.26 T
2 F
(  expression) 432.81 267.26 T
0 F
(;) 491.98 267.26 T
1 F
(! Attention:) 320.55 241.17 T
2 F
(   \216galit\216  -->  signe) 376.2 241.17 T
1 F
(==) 471.05 241.17 T
(!!!) 494.85 241.17 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
366.95 207.22 320.55 207.22 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Exemple:) 320.55 208.12 T
0 0 0 1 0 0 0 K
3 9.57 Q
0 0 0 1 0 0 0 K
({) 320.55 186.95 T
(  int i, j, k, l;) 320.55 176.95 T
(  i = 5;) 320.55 156.94 T
(  j = 3;) 320.55 146.94 T
(  k = i + j;) 320.55 136.94 T
(  l = i + j * k;) 320.55 126.94 T
(  m = \050i + j\051 * k;) 320.55 116.94 T
(  .....) 320.55 106.93 T
(}) 320.55 96.93 T
FMENDPAGE
%%EndPage: "mini" 3
%%Page: "mini" 4
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 0.39 639 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           13) 42.66 781.66 B
0 0 0 1 0 0 0 K
42.66 475.36 273.58 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 458.11 T
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 R
7 X
0 0 0 1 0 0 0 K
V
158.41 468.76 160.52 470.87 R
0 X
V
-0.07 H
0 Z
N
27 0.39 639 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 581.47 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
181.42 749.31 54.4 749.31 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Op\216rateurs arithm\216tiques) 54.4 750.2 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(Par ordre de priorit\216:) 54.4 717.15 T
(\245) 54.4 701.5 T
(     -) 60.38 701.5 T
2 7.83 Q
(\050unaire\051) 81.26 701.5 T
2 10.44 Q
(\245) 54.4 686.71 T
(     *     /    %) 60.38 686.71 T
(\245) 54.4 671.93 T
(     +    -) 60.38 671.93 T
2 7.83 Q
(\050binaire\051) 98.96 671.93 T
2 10.44 Q
(%  =  reste de la division enti\217re) 54.4 632.79 T
( /    =  division enti\217re) 54.4 616.26 T
2 7.83 Q
(OU) 156.21 616.26 T
2 10.44 Q
( r\216elle suivant le cas) 167.95 616.26 T
(Attention:) 54.4 583.21 T
(            2 / 4   vaut  0) 54.4 559.73 T
(mais    2. / 4   vaut  0.5) 54.4 543.2 T
293.15 0.39 905.15 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           14) 308.81 781.66 B
0 0 0 1 0 0 0 K
308.81 475.36 539.72 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 458.11 T
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 R
7 X
0 0 0 1 0 0 0 K
V
424.56 468.76 426.66 470.87 R
0 X
V
-0.07 H
0 Z
N
293.15 0.39 905.15 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 581.47 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
495.71 749.31 320.55 749.31 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Op\216rateurs logiques et relationnels) 320.55 750.2 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(Par ordre de priorit\216 :) 320.55 726.72 T
(\245) 320.55 711.07 T
(        !) 326.52 711.07 T
2 7.83 Q
(\050n\216gation unaire\051) 355.54 711.07 T
2 10.44 Q
(\245) 320.55 696.28 T
(        >      >=     <     <=) 326.52 696.28 T
(\245) 320.55 681.49 T
(        ==    !=) 326.52 681.49 T
(\245) 320.55 666.71 T
(        && \050et\051) 326.52 666.71 T
(\245) 320.55 651.92 T
(        || \050ou\051) 326.52 651.92 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
372.17 618.85 320.55 618.85 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Propri\216tes) 320.55 619.74 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\245) 320.55 604.09 T
(\216valu\216s de la gauche vers la droite) 326.52 604.09 T
(\245) 320.55 589.3 T
(priorit\216  <  aux op\216rateurs arithm\216tiques :) 326.52 589.3 T
2 7.83 Q
(\050\210 l\325exception de l\325op\216rateur unaire) 326.53 578.86 T
0 F
(!) 450.96 578.86 T
2 F
( \051) 455.74 578.86 T
3 9.57 Q
(    a < lim-1   <-->   a < \050lim-1\051) 320.55 561.18 T
2 10.44 Q
(\245) 320.55 536.68 T
-0.19 (arr\220t d\217s que la valeur de v\216rit\216 est trouv\216e :) 326.52 536.68 P
3 9.57 Q
(\050i <= 5 && x != y\051) 320.55 516.39 T
-0.13 (\050i < lim-1 && \050c = getchar\050\051\051 != \325n\325\051) 320.55 496.38 P
27 -389.06 639 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           15) 42.66 392.21 B
0 0 0 1 0 0 0 K
42.66 85.91 273.58 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 68.66 T
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 R
7 X
0 0 0 1 0 0 0 K
V
158.41 79.31 160.52 81.42 R
0 X
V
-0.07 H
0 Z
N
27 -389.06 639 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 192.02 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
162.86 359.87 54.4 359.87 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Conversions de types) 54.4 360.76 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(Principe g\216n\216ral :) 54.4 337.27 T
(\321 nombreuses conversions implicites) 54.4 321.62 T
(\321 conversion vers le type "le plus grand") 54.4 306.83 T
(Exemples:) 54.4 274.65 T
3 9.57 Q
({) 54.4 253.49 T
(  int i = 2, j = 4;) 54.4 243.48 T
(  char c;) 54.4 233.48 T
(  f) 54.4 223.48 T
(loat x = 4., y;) 71.62 223.48 T
(  i = c;    /* OK */) 54.4 203.48 T
(  c = i;    /* entier tronqu\216 */) 54.4 193.47 T
(  x = i;    /* OK */) 54.4 173.47 T
(  i = x;    /* r\216el tronqu\216 */) 54.4 163.47 T
(  y = i + x;  /* conv. en f) 54.4 143.46 T
(loat */) 209.39 143.46 T
(  y = i / x;  /* idem: y = 0.5 */) 54.4 133.46 T
-0.49 (  y = i / j;  /* pas de conv: y = 0.*/) 54.4 123.46 P
(  .....) 54.4 113.46 T
(}) 54.4 103.46 T
293.15 -389.06 905.15 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           16) 308.81 392.21 B
0 0 0 1 0 0 0 K
308.81 85.91 539.72 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 68.66 T
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 R
7 X
0 0 0 1 0 0 0 K
V
424.56 79.31 426.66 81.42 R
0 X
V
-0.07 H
0 Z
N
293.15 -389.06 905.15 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 192.02 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
422.63 359.87 320.55 359.87 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Conversion explicite) 320.55 360.76 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(au moyen d\325un "cast" :) 320.55 338.14 T
3 9.57 Q
(Exemple:) 320.55 316.98 T
(int i = 2, j = 4;) 320.55 296.97 T
(f) 320.55 286.97 T
(loat y, z;) 326.29 286.97 T
(y = i / j;             /* y = 0.0 */) 320.55 266.97 T
(z = \050f) 320.55 256.97 T
(loat\051 i / j;     /* y = 0.5 */) 354.99 256.97 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
395.36 224.18 320.55 224.18 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Incr\216mentation) 320.55 225.08 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\321   i++   ou   ++i    signi\336ent:      i = i + 1) 320.55 203.33 T
(\321   i += n               signi\336e:         i = i + n) 320.55 188.55 T
(\321   m\220me chose avec:      i--,   --i,   i -= n) 320.55 173.76 T
(Notation pr\216\336xe et post\336xe:) 320.55 148.54 T
(\245) 320.55 126.79 T
(  i = 5;  a = ++i;      -->     i = 6   et) 326.52 126.79 T
1 F
(a = 6) 487.25 126.79 T
2 F
(\245) 320.55 105.92 T
(  i = 5;  a = i++;      -->     i = 6   et) 326.52 105.92 T
1 F
(a = 5) 487.25 105.92 T
FMENDPAGE
%%EndPage: "mini" 4
%%Page: "mini" 5
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 0.39 639 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           17) 42.66 781.66 B
0 0 0 1 0 0 0 K
42.66 475.36 273.58 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 458.11 T
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 R
7 X
0 0 0 1 0 0 0 K
V
158.41 468.76 160.52 470.87 R
0 X
V
-0.07 H
0 Z
N
27 0.39 639 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 581.47 TF
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 15.66 Q
(Manipulation de bits) 54.4 746.73 T
0 0 0 1 0 0 0 K
2 10.44 Q
0 0 0 1 0 0 0 K
(\245) 54.4 708.46 T
(      &) 60.38 708.46 T
2 7.83 Q
(ET) 102.16 708.46 T
2 8.7 Q
(\050\210 ne pas confondre avec &&\051) 144.08 708.46 T
2 10.44 Q
(\245) 54.4 693.67 T
(       |) 60.38 693.67 T
2 7.83 Q
(OU) 100.81 693.67 T
2 10.44 Q
( inclusif) 112.55 693.67 T
2 8.7 Q
(  \050\210 ne pas confondre avec ||\051) 147.35 693.67 T
2 10.44 Q
(\245) 54.4 678.88 T
(      ^) 60.38 678.88 T
2 7.83 Q
(OU) 100.09 678.88 T
2 10.44 Q
( exclusif) 111.83 678.88 T
(\245) 54.4 664.1 T
(     <<    d\216calage \210 gauche) 60.38 664.1 T
(\245) 54.4 649.31 T
(     >>    d\216calage \210 droite) 60.38 649.31 T
(\245) 54.4 634.53 T
(      ~     compl\216ment \210 un) 60.38 634.53 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
97.33 608.41 54.4 608.41 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Exemple) 54.4 609.3 T
0 0 0 1 0 0 0 K
3 9.57 Q
0 0 0 1 0 0 0 K
(  int n, m;) 54.4 588.14 T
(  n = n & 0177;) 54.4 578.14 T
(  m = n < 2;    /* <->  m = n * 2 */) 54.4 568.14 T
1 10.44 Q
(!Attention:) 54.4 536.24 T
2 F
(Ne pas confondre :) 54.4 519.72 T
(\321  &  avec  && \050et logique\051) 54.4 504.06 T
(\321   |   avec  | |   \050ou logique\051) 54.4 489.28 T
293.15 0.39 905.15 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           18) 308.81 781.66 B
0 0 0 1 0 0 0 K
308.81 475.36 539.72 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 458.11 T
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 R
7 X
0 0 0 1 0 0 0 K
V
424.56 468.76 426.66 470.87 R
0 X
V
-0.07 H
0 Z
N
293.15 0.39 905.15 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 581.47 TF
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 15.66 Q
(Priorit\216 des op\216rateurs) 320.55 746.73 T
0 0 0 1 0 0 0 K
27 -389.06 639 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           19) 42.66 392.21 B
0 0 0 1 0 0 0 K
42.66 85.91 273.58 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 68.66 T
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 R
7 X
0 0 0 1 0 0 0 K
V
158.41 79.31 160.52 81.42 R
0 X
V
-0.07 H
0 Z
N
27 -389.06 639 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 192.02 TF
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 15.66 Q
(T) 54.4 357.28 T
(ests et Boucles) 62.81 357.28 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
195.93 317.25 54.4 317.25 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Expressions conditionnelles) 54.4 318.14 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(Principe:) 54.4 294.66 T
0 F
(if) 66 275.52 T
(\050) 75.28 275.52 T
2 F
(test) 78.76 275.52 T
0 F
(\051) 95.58 275.52 T
2 F
(        action1) 54.4 264.21 T
0 F
(;) 111.26 264.21 T
(else) 63.1 252.91 T
2 F
(       action2) 54.4 241.6 T
0 F
(;) 111.26 241.6 T
2 F
(Remarques:) 54.4 215.51 T
(\321 pas de "then") 54.4 199.85 T
(\321 mais des) 54.4 185.07 T
0 F
(\050  \051) 112.4 185.07 T
2 F
( autour du "test") 125.15 185.07 T
(\321) 54.4 170.28 T
0 F
( ;) 67.74 170.28 T
2 F
(  \210 la \336n des) 74.11 170.28 T
2 7.83 Q
(DEUX) 133.29 170.28 T
2 10.44 Q
( instructions) 155.04 170.28 T
(Exemple:) 54.4 143.32 T
3 9.57 Q
(  if \050a > b\051) 54.4 122.15 T
(    z = a;) 54.4 112.15 T
(  else z = b;) 54.4 102.15 T
293.15 -389.06 905.15 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           20) 308.81 392.21 B
0 0 0 1 0 0 0 K
308.81 85.91 539.72 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 68.66 T
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 R
7 X
0 0 0 1 0 0 0 K
V
424.56 79.31 426.66 81.42 R
0 X
V
-0.07 H
0 Z
N
293.15 -389.06 905.15 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 192.02 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
326.92 359.87 320.55 359.87 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(T) 320.55 360.76 T
0 1 1 0 1 0 0 K
399.82 359.87 326.15 359.87 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(ests imbriqu\216s) 326.15 360.76 T
0 0 0 1 0 0 0 K
3 9.57 Q
0 0 0 1 0 0 0 K
(  if \050a > b && \050 a < 5 || b < 10\051\051) 320.55 342.64 T
(    z = a;) 320.55 332.63 T
(  else z = b;) 320.55 322.63 T
2 10.44 Q
(Rappel: arret de l\325\216valuation d\217s que :) 320.55 300.31 T
(\321 condition fausse pour:  &&) 320.55 284.65 T
(\321 condition vraie pour:     |  |) 320.55 269.87 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
367.52 243.32 320.55 243.32 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Bool\216ens) 320.55 244.21 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(pas de type bool\216en en C  => simulation :) 320.55 227.68 T
3 9.57 Q
(#def) 320.55 211.16 T
(ine False    0) 343.51 211.16 T
(#def) 320.55 200 T
(ine True     1) 343.51 200 T
(#def) 320.55 189.99 T
(ine Boolean  int) 343.51 189.99 T
(Boolean ok, f) 320.55 169.99 T
(ini, status;) 395.17 169.99 T
(....etc....) 320.55 159.99 T
(if \050ok\051          /* <-> \050ok != 0\051*/) 320.55 139.98 T
(   status = True;) 320.55 129.98 T
-0.09 (if \050! f) 320.55 109.98 P
-0.09 (ini\051      /* <-> \050f) 360.56 109.98 P
-0.09 (ini == 0\051*/) 468.93 109.98 P
(   status = False;) 320.55 99.98 T
FMENDPAGE
%%EndPage: "mini" 5
%%Page: "mini" 6
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 0.39 639 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           21) 42.66 781.66 B
0 0 0 1 0 0 0 K
42.66 475.36 273.58 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 458.11 T
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 R
7 X
0 0 0 1 0 0 0 K
V
158.41 468.76 160.52 470.87 R
0 X
V
-0.07 H
0 Z
N
27 0.39 639 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 581.47 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
151.26 749.31 54.4 749.31 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Actions imbriqu\216es) 54.4 750.2 T
0 0 0 1 0 0 0 K
3 9.57 Q
0 0 0 1 0 0 0 K
(  if \050n > 0\051) 54.4 732.08 T
(    if \050a > b\051) 54.4 722.08 T
(      z = a;) 54.4 712.08 T
(    else z = b;) 54.4 702.08 T
(  if \050n > 0\051{) 54.4 682.07 T
(    if \050a > b\051) 54.4 672.07 T
(      z = a;) 54.4 662.07 T
(    }) 54.4 652.07 T
(  else z = b;) 54.4 642.07 T
2 10.44 Q
(Le ") 54.4 620.61 T
0 F
(else) 72.61 620.61 T
2 F
(" ne se rapporte pas au m\220me) 92.92 620.61 T
0 F
(if) 235.86 620.61 T
2 F
(  !!!) 242.23 620.61 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
135.62 586.67 54.4 586.67 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Else-if cascad\216s) 54.4 587.56 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if) 66 568.43 T
(\050) 75.28 568.43 T
2 F
(test1) 78.76 568.43 T
0 F
(\051) 101.39 568.43 T
2 F
(        action1) 54.4 557.12 T
0 F
(;) 111.26 557.12 T
(else if) 63.1 545.81 T
(\050) 95.59 545.81 T
2 F
(test2) 99.07 545.81 T
0 F
(\051) 121.7 545.81 T
2 F
(        action2) 54.4 534.51 T
0 F
(;) 114.16 534.51 T
(else if) 63.1 523.2 T
(\050) 95.59 523.2 T
2 F
(test3) 99.07 523.2 T
0 F
(\051) 121.7 523.2 T
2 F
(        action3) 54.4 511.89 T
0 F
(;) 114.16 511.89 T
(   ....) 54.4 500.59 T
(else) 63.1 489.28 T
2 F
( action_par-d\216faut) 83.41 489.28 T
0 F
(;) 170.44 489.28 T
293.15 0.39 905.15 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           22) 308.81 781.66 B
0 0 0 1 0 0 0 K
308.81 475.36 539.72 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 458.11 T
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 R
7 X
0 0 0 1 0 0 0 K
V
424.56 468.76 426.66 470.87 R
0 X
V
-0.07 H
0 Z
N
293.15 0.39 905.15 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 581.47 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
354.19 749.31 320.55 749.31 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Switch) 320.55 750.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(switch) 320.55 727.16 T
2 F
( \050expression\051 {) 353.03 727.16 T
0 F
(case) 332.15 715.85 T
4 F
(const1) 358.27 715.85 T
2 F
(:) 391.92 715.85 T
(        actions1;) 320.55 704.54 T
0 F
(break) 343.76 693.24 T
2 F
( ;) 371.61 693.24 T
0 F
(case) 332.15 674.54 T
4 F
(const2) 358.27 674.54 T
2 F
( :) 389.01 674.54 T
(        actions2 ;) 320.55 663.23 T
0 F
(break) 343.76 651.92 T
2 F
( ;) 371.61 651.92 T
(    ........) 320.55 640.61 T
0 F
(default) 332.15 621.92 T
2 F
( :) 366.37 621.92 T
(        actions_par_defaut ;) 320.55 610.61 T
0 F
(break) 343.76 599.3 T
2 F
( ;) 371.61 599.3 T
(}) 320.55 587.99 T
(\321 const1, const2 .... sont des constantes) 320.55 561.47 T
(  \210 valeur enti\217re) 326.53 551.03 T
(\321) 320.55 530.16 T
0 F
(break) 333.89 530.16 T
2 F
( ou) 361.73 530.16 T
0 F
(return) 379.14 530.16 T
2 F
( pour sortir du switch) 409.29 530.16 T
(  \050sinon on continue jusqu\325\210 la \336n du switch\051) 326.53 519.72 T
(\321 plusieurs actions possibles s\216par\216es par) 320.55 498.85 T
0 F
(;) 524.73 498.85 T
27 -389.06 639 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           23) 42.66 392.21 B
0 0 0 1 0 0 0 K
42.66 85.91 273.58 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 68.66 T
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 R
7 X
0 0 0 1 0 0 0 K
V
158.41 79.31 160.52 81.42 R
0 X
V
-0.07 H
0 Z
N
27 -389.06 639 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 192.02 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
113.56 359.87 54.4 359.87 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Op\216rateur ?) 54.4 360.76 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(L) 54.4 344.23 T
(\325expression :) 59.63 344.23 T
(       test) 54.4 327.71 T
0 F
(?) 94.44 327.71 T
2 F
( expr1) 100.81 327.71 T
0 F
(:) 132.72 327.71 T
2 F
( expr2) 136.19 327.71 T
(renvoie :) 54.4 311.18 T
(\321   expr1) 54.4 295.52 T
4 F
(si test != 0) 105.45 295.52 T
2 F
(\321   expr2) 54.4 280.74 T
4 F
(sinon) 105.45 280.74 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
97.33 257.23 54.4 257.23 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Exemple) 54.4 258.12 T
0 0 0 1 0 0 0 K
3 9.57 Q
0 0 0 1 0 0 0 K
(   z = \050a > b\051 ? a : b ;) 54.4 240.01 T
2 10.44 Q
(\216quivaut \210 :) 54.4 217.68 T
3 9.57 Q
(  if \050a > b\051) 54.4 199.56 T
(    z = a;) 54.4 189.56 T
(  else z = b;) 54.4 179.56 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
111.23 156.34 54.4 156.34 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Application) 54.4 157.23 T
0 0 0 1 0 0 0 K
3 9.57 Q
0 0 0 1 0 0 0 K
(#def) 54.4 139.11 T
(ine MAX\050a,b\051 \050\050a\051>\050b\051 ? \050a\051:\050b\051\051) 77.36 139.11 T
(int i = 5, j = 7, k;) 54.4 119.11 T
(........) 54.4 109.11 T
(k = MAX\050i,j\051;) 54.4 99.11 T
293.15 -389.06 905.15 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           24) 308.81 392.21 B
0 0 0 1 0 0 0 K
308.81 85.91 539.72 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 68.66 T
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 R
7 X
0 0 0 1 0 0 0 K
V
424.56 79.31 426.66 81.42 R
0 X
V
-0.07 H
0 Z
N
293.15 -389.06 905.15 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 192.02 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
419.15 359.87 320.55 359.87 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Boucles while et for) 320.55 360.76 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(while) 320.55 327.71 T
2 F
( \050test\051) 346.65 327.71 T
(   action;) 320.55 311.18 T
0 F
(for) 320.55 278.13 T
2 F
( \050init ; test ; incr\051) 334.46 278.13 T
(   action;) 320.55 261.6 T
(\321) 320.55 229.42 T
4 F
(init, test) 333.89 229.42 T
2 F
( et) 369.85 229.42 T
4 F
(incr) 384.36 229.42 T
2 F
( sont des expressions qq.) 401.17 229.42 T
(\321 test ef) 320.55 214.64 T
(fectu\216) 362.13 214.64 T
0 F
(avant) 393.46 214.64 T
2 F
( d\325entrer dans la boucle) 420.72 214.64 T
(\321 continue tant que) 320.55 199.85 T
4 F
(test != 0) 416.86 199.85 T
2 F
(\321 la boucle) 320.55 185.07 T
0 F
(for) 378.56 185.07 T
2 F
( est \216qui) 392.47 185.07 T
(valente \210 :) 431.92 185.07 T
4 F
(    init) 320.55 152.89 T
2 F
( ;) 345.49 152.89 T
0 F
(    while) 320.55 139.84 T
2 F
( \050) 358.26 139.84 T
4 F
(test) 364.63 139.84 T
2 F
(\051 {) 384.36 139.84 T
(       action ;) 320.55 126.79 T
4 F
(     incr) 326.35 113.75 T
2 F
(;) 357.67 113.75 T
(    }) 320.55 100.7 T
FMENDPAGE
%%EndPage: "mini" 6
%%Page: "mini" 7
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 0.39 639 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           25) 42.66 781.66 B
0 0 0 1 0 0 0 K
42.66 475.36 273.58 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 458.11 T
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 R
7 X
0 0 0 1 0 0 0 K
V
158.41 468.76 160.52 470.87 R
0 X
V
-0.07 H
0 Z
N
27 0.39 639 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 581.47 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
103.13 749.31 54.4 749.31 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Exemples) 54.4 750.2 T
0 0 0 1 0 0 0 K
3 9.57 Q
0 0 0 1 0 0 0 K
(#def) 54.4 729.04 T
(ine TAB_SIZE 20) 77.36 729.04 T
(int tab[TAB_SIZE];) 54.4 709.04 T
(int i;) 54.4 699.03 T
(/* en C les tableaux commencent a) 54.4 679.03 T
( * l\325indice 0 => balayer "tab") 54.4 669.46 T
( * de 0 a TAB_SIZE-1) 54.4 659.46 T
( */) 54.4 649.46 T
(for \050i = 0; i < TAB_SIZE; i++\051 {) 54.4 629.45 T
(   tab[i] = 0;) 54.4 619.45 T
(}) 54.4 609.45 T
(/* equivaut a : */) 54.4 589.45 T
(i = 0;) 54.4 569.44 T
(while \050i < TAB_SIZE\051) 54.4 559.44 T
(   tab[i++] = 0;) 54.4 549.44 T
(/* ou a : */) 54.4 529.43 T
(i = -1;) 54.4 509.43 T
(while \050++i < TAB_SIZE\051) 54.4 499.43 T
(   tab[i] = 0;) 54.4 489.42 T
293.15 0.39 905.15 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           26) 308.81 781.66 B
0 0 0 1 0 0 0 K
308.81 475.36 539.72 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 458.11 T
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 R
7 X
0 0 0 1 0 0 0 K
V
424.56 468.76 426.66 470.87 R
0 X
V
-0.07 H
0 Z
N
293.15 0.39 905.15 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 581.47 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
400.58 749.31 320.55 749.31 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Boucle do-while) 320.55 750.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(do) 320.55 726.72 T
2 F
(   action;) 320.55 710.2 T
0 F
(while) 320.55 693.67 T
2 F
( \050test\051 ;) 346.65 693.67 T
(\321 action toujours ex\216cut\216e au moins 1 fois) 320.55 661.49 T
(\321 continue tant que) 320.55 646.7 T
4 F
(test != 0) 419.76 646.7 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
409.86 613.63 320.55 613.63 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Break et Continue) 320.55 614.52 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\245) 320.55 591.91 T
0 F
(break) 326.52 591.91 T
2 F
( permet de sortir d\325une boucle) 354.37 591.91 T
(\050ou d\325un switch\051) 326.53 581.47 T
(\245) 320.55 566.69 T
0 F
(continue) 326.52 566.69 T
2 F
( passe \210 l\325it\216ration suivante) 370.02 566.69 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
393.04 533.61 320.55 533.61 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Goto et Labels) 320.55 534.51 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\245) 320.55 511.89 T
(\210 \216viter sauf cas particuliers) 326.52 511.89 T
27 -389.06 639 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           27) 42.66 392.21 B
0 0 0 1 0 0 0 K
42.66 85.91 273.58 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 68.66 T
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 R
7 X
0 0 0 1 0 0 0 K
V
158.41 79.31 160.52 81.42 R
0 X
V
-0.07 H
0 Z
N
27 -389.06 639 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 192.02 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
103.13 359.87 54.4 359.87 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Exemples) 54.4 360.76 T
0 0 0 1 0 0 0 K
3 9.57 Q
0 0 0 1 0 0 0 K
(#def) 54.4 339.59 T
(ine TAB_SIZE 20) 77.36 339.59 T
(char line[TAB_SIZE];) 54.4 319.59 T
(int i;) 54.4 309.59 T
(/* trouver le 1er car non blanc */) 54.4 289.58 T
(for\050i = 0; i < TAB_SIZE; i++\051) 54.4 269.58 T
(  if \050line[i] != \325 \325\051) 54.4 259.58 T
(    break;) 54.4 249.57 T
2 10.44 Q
(-----------------------------------------------------------) 54.4 234.21 T
3 9.57 Q
(/* une justif) 54.4 223.05 T
(ication de goto */) 129.02 223.05 T
(for \050....\051) 54.4 203.04 T
(  for \050....\051) 54.4 193.04 T
(    for \050....\051 {) 54.4 183.04 T
(       ....) 54.4 173.04 T
(       if \050Touch\216\050iceberg\051 == True\051) 54.4 163.03 T
(          goto fatal_error;) 54.4 153.03 T
(    }) 54.4 143.03 T
(   ....) 54.4 133.03 T
(fatal_error :) 54.4 113.02 T
-0.21 (  printf\050"sauve qui peut ...\134007\134n"\051;) 54.4 103.02 P
293.15 -389.06 905.15 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           28) 308.81 392.21 B
0 0 0 1 0 0 0 K
308.81 85.91 539.72 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 68.66 T
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 R
7 X
0 0 0 1 0 0 0 K
V
424.56 79.31 426.66 81.42 R
0 X
V
-0.07 H
0 Z
N
293.15 -389.06 905.15 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 192.02 TF
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 15.66 Q
(Fonctions) 320.55 357.28 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
362.88 322.03 320.55 322.03 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Objectif:) 320.55 322.92 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(D\216couper un programme en petites entit\216s :) 320.55 300.31 T
(\321 ind\216pendantes) 320.55 284.65 T
(\321 r\216utilisables) 320.55 269.87 T
(\321 plus lisibles) 320.55 255.08 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
483.54 231.58 320.55 231.58 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Librairies et compilation s\216par\216e) 320.55 232.47 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(Les fonctions peuvent \220tre d\216\336nies :) 320.55 209.85 T
(\321 dans plusieurs \336chiers) 320.55 194.2 T
(\321 dans des librairies) 320.55 179.41 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
360.57 155.91 320.55 155.91 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Syntaxe) 320.55 156.8 T
0 0 0 1 0 0 0 K
2 8.7 Q
0 0 0 1 0 0 0 K
(return_type  function_name \050argument declarations\051) 320.55 137.52 T
({) 320.55 127.95 T
(     declarations;) 320.55 118.39 T
(     statements;) 320.55 108.82 T
(}) 320.55 99.25 T
FMENDPAGE
%%EndPage: "mini" 7
%%Page: "mini" 8
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 0.39 639 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           29) 42.66 781.66 B
0 0 0 1 0 0 0 K
42.66 475.36 273.58 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 458.11 T
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 R
7 X
0 0 0 1 0 0 0 K
V
158.41 468.76 160.52 470.87 R
0 X
V
-0.07 H
0 Z
N
27 0.39 639 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 581.47 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
100.8 749.31 54.4 749.31 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Exemple:) 54.4 750.2 T
0 0 0 1 0 0 0 K
180.27 749.41 106.61 749.41 2 L
0 0 0 1 0 0 0 K
V
0.48 H
N
1 F
(\336chier main.c :) 106.61 750.2 T
2 8.7 Q
(#include <stdio.h>) 54.4 730.06 T
(#de\336ne CARD\050tab\051       \050 sizeof\050tab\051 / sizeof\050tab[0]\051 \051) 54.4 720.49 T
(int ChercheV) 54.4 701.35 T
(al\050 \337oat tab[ ], int taille, \337oat val \051) 104.03 701.35 T
({) 54.4 691.79 T
(    int k;) 54.4 682.22 T
(    for \050k = 0; k < taille; k++\051) 54.4 672.65 T
(        if \050tab[k] == val\051 return k;) 54.4 663.08 T
(    return -1;) 54.4 653.52 T
(}) 54.4 643.95 T
(main\050\051) 54.4 624.82 T
({) 54.4 615.25 T
(    \337oat donnees[ ] = {1., 2., 3., 4., 5., 6., 7., 8., 9., 10.};) 54.4 605.68 T
(    int indice;) 54.4 596.11 T
(    indice = ChercheV) 54.4 576.98 T
(al\050donnees, CARD\050donnees\051, 4.\051;) 134.73 576.98 T
(    printf\050 "indice = %d , valeur = %f \134n",) 54.4 567.41 T
(              indice,  donnees[indice] \051;) 54.4 557.84 T
(}) 54.4 548.28 T
92.09 528.4 54.4 528.4 2 L
V
0.28 H
N
0 F
(Question) 54.4 529.14 T
2 F
( : V) 92.09 529.14 T
(aleur de l\325indice ?) 104.51 529.14 T
101.77 509.27 54.4 509.27 2 L
V
N
0 F
(Remarques) 54.4 510.01 T
2 F
( :) 101.77 510.01 T
(-- initialisation des tableaux \050ANSI C\051) 54.4 500.44 T
(--) 54.4 490.87 T
0 F
(macro) 62.61 490.87 T
4 F
(CARD\050\051) 91.13 490.87 T
2 F
( et op\216rateur) 121.56 490.87 T
0 F
(sizeof) 173.29 490.87 T
293.15 0.39 905.15 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           30) 308.81 781.66 B
0 0 0 1 0 0 0 K
308.81 475.36 539.72 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 458.11 T
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 R
7 X
0 0 0 1 0 0 0 K
V
424.56 468.76 426.66 470.87 R
0 X
V
-0.07 H
0 Z
N
293.15 0.39 905.15 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 581.47 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
482.04 749.31 320.55 749.31 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(D\216\336nition de fonction \050ANSI C\051 =) 320.55 750.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 320.55 718.02 T
(en-t\220te) 326.52 718.02 T
2 F
(\321 type de la valeur retourn\216e) 320.55 703.24 T
(\321 nom de la fonction) 320.55 688.45 T
(\321 d\216claration des arguments) 320.55 673.67 T
(     !!! Attention: pas de) 320.55 658.01 T
0 F
(;) 430.79 658.01 T
2 F
( apr\217s la) 437.17 658.01 T
0 F
(\051) 483 658.01 T
2 F
(\245) 320.55 625.83 T
0 F
(corps) 326.52 625.83 T
2 F
( =) 354.94 625.83 T
0 F
(bloc) 366.84 625.83 T
2 F
( entre) 388.3 625.83 T
0 F
({  }) 417.89 625.83 T
2 F
( contenant :) 431.81 625.83 T
(\321 des d\216clarations) 320.55 611.04 T
(\321 des instructions) 320.55 596.26 T
(\321 d\325autres blocs) 320.55 581.47 T
(\245) 320.55 550.16 T
0 F
(return) 326.52 550.16 T
2 F
( sert :) 356.68 550.16 T
(\321 \210 sortir de la fonction) 320.55 535.38 T
(\321 \210 renvoyer une valeur de type) 320.55 520.59 T
4 F
(return_type) 474.86 520.59 T
2 8.7 Q
(     \050type indiqu\216 avant le nom de fonction\051) 320.55 510.88 T
27 -389.06 639 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           31) 42.66 392.21 B
0 0 0 1 0 0 0 K
42.66 85.91 273.58 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 68.66 T
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 R
7 X
0 0 0 1 0 0 0 K
V
158.41 79.31 160.52 81.42 R
0 X
V
-0.07 H
0 Z
N
27 -389.06 639 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 192.02 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
173.89 359.87 54.4 359.87 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Passage des arguments) 54.4 360.76 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\321 passage par) 54.4 345.1 T
0 F
(valeur) 128.07 345.1 T
2 F
(\321) 54.4 330.31 T
1 F
(sauf) 67.74 330.31 T
2 F
( pour les) 89.2 330.31 T
0 F
(tableaux) 132.12 330.31 T
2 F
(i.e.:) 54.4 314.66 T
(    les arguments transmis sont) 54.4 298.13 T
0 F
(recopi\216s) 199.41 298.13 T
2 F
(    dans les variables) 54.4 281.61 T
1 F
(locales) 152.43 281.61 T
2 F
( de la fonction) 187.83 281.61 T
(sauf:) 54.4 265.08 T
(    les) 54.4 248.56 T
0 F
(tableaux) 82.25 248.56 T
2 F
( qui sont pass\216s par) 124.59 248.56 T
0 F
(adresse) 220.89 248.56 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
100.8 221.57 54.4 221.57 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(Exemple:) 54.4 222.47 T
0 0 0 1 0 0 0 K
2 8.7 Q
0 0 0 1 0 0 0 K
(   quelles seront les valeurs af) 100.8 222.47 T
(\336ch\216es ?) 215.7 222.47 T
(void swap\050 int i, int j \051) 54.4 204.49 T
({) 54.4 194.92 T
(   int  aux;) 54.4 185.36 T
(   aux = i;  i = j;  j = aux;) 54.4 175.79 T
(}) 54.4 166.22 T
(main\050\051) 54.4 147.09 T
({) 54.4 137.52 T
(   int  i = 5,  j = 7;) 54.4 127.95 T
(   swap\050 i, j \051;) 54.4 118.39 T
(   printf\050 " i = %d , j = %d \134n", i , j \051;) 54.4 108.82 T
(}) 54.4 99.25 T
293.15 -389.06 905.15 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           32) 308.81 392.21 B
0 0 0 1 0 0 0 K
308.81 85.91 539.72 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 68.66 T
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 R
7 X
0 0 0 1 0 0 0 K
V
424.56 79.31 426.66 81.42 R
0 X
V
-0.07 H
0 Z
N
293.15 -389.06 905.15 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 192.02 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
327.51 359.87 320.55 359.87 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(V) 320.55 360.76 T
0 1 1 0 1 0 0 K
402.92 359.87 326.93 359.87 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(aleur retourn\216e) 326.93 360.76 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\321 si) 320.55 339.01 T
4 F
(return_type) 344.32 339.01 T
2 F
( pas sp\216ci\336\216 :) 400.02 339.01 T
(     ---> la fonction renvoie un) 320.55 323.36 T
0 F
(int) 456.58 323.36 T
2 F
(\321 le type) 320.55 301.61 T
0 F
(void) 367.54 301.61 T
2 F
( signi\336e :) 388.99 301.61 T
(     ---> aucune valeur retourn\216e) 320.55 285.96 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
455.71 252.02 320.55 252.02 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Cas du "vieux" C non-ANSI) 320.55 252.91 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(Arguments d\216clar\216s en 2 \216tapes :) 320.55 230.29 T
(\321 noms entre) 320.55 214.64 T
0 F
(\050  \051) 391.89 214.64 T
2 F
(\321 suivis de la d\216claration compl\217te) 320.55 199.85 T
2 8.7 Q
(int  ChercheV) 320.55 173.61 T
(al\050tab, taille, val\051) 372.59 173.61 T
(     \337oat tab[ ];) 320.55 164.05 T
(     int taille;) 320.55 154.48 T
(     \337oat val;) 320.55 144.91 T
({) 320.55 135.35 T
(    .....etc.....) 320.55 125.78 T
1 10.44 Q
(!Attention:) 320.55 106.64 T
2 8.7 Q
(   AUCUNE) 373.3 106.64 T
2 10.44 Q
(v\216ri\336cation de type) 419.69 106.64 T
(                     avec ce style de d\216claration) 320.55 97.51 T
FMENDPAGE
%%EndPage: "mini" 8
%%Page: "mini" 9
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 0.39 639 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           33) 42.66 781.66 B
0 0 0 1 0 0 0 K
42.66 475.36 273.58 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 458.11 T
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 R
7 X
0 0 0 1 0 0 0 K
V
158.41 468.76 160.52 470.87 R
0 X
V
-0.07 H
0 Z
N
27 0.39 639 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 581.47 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
157.06 749.31 54.4 749.31 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Compilation s\216par\216e) 54.4 750.2 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(Fonctions r\216parties dans plusieurs \336chiers.) 54.4 726.72 T
54.4 483.19 265.75 757.16 C
54.4 494.5 265.75 723.24 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
53.42 494.5 266.73 723.24 R
7 X
0 0 0 1 0 0 0 K
V
65.16 609.3 112.13 679.75 R
V
0.22 H
2 Z
0 X
N
127.78 609.3 174.75 679.75 R
7 X
V
0 X
N
190.41 609.3 241.29 679.75 R
7 X
V
0 X
N
2 8.7 Q
(\336chier1.c) 73.42 689.49 T
(\336chier2.c) 136.04 689.49 T
(\336chier2.c) 202.15 689.49 T
(fonction1\050\051) 69.08 660.19 T
(fonction2\050\051) 69.08 644.53 T
0 F
(main) 69.08 624.96 T
2 F
(\050\051) 89.38 624.96 T
(fonction5\050\051) 194.32 664.1 T
(fonction6\050\051) 194.32 636.7 T
(fonction3\050\051) 131.7 660.19 T
(fonction4\050\051) 131.7 636.7 T
(.......) 194.32 617.13 T
(\336chier1.o) 73.42 567.29 T
(\336chier2.o) 135.61 567.29 T
(\336chier3.o) 198.66 567.29 T
(ex\216cutable) 132.69 504.66 T
91.16 585.9 88.65 577.12 86.13 585.9 88.65 585.9 4 Y
V
88.65 604.52 88.65 585.9 2 L
1.3 H
N
153.79 585.9 151.27 577.12 148.75 585.9 151.27 585.9 4 Y
V
151.27 604.52 151.27 585.9 2 L
N
216.41 585.9 213.89 577.12 211.37 585.9 213.89 585.9 4 Y
V
213.89 604.52 213.89 585.9 2 L
N
142.07 521.96 147.35 514.51 138.92 518.03 140.5 519.99 4 Y
V
88.65 561.47 140.5 519.98 2 L
N
153.79 523.28 151.27 514.5 148.75 523.28 151.27 523.28 4 Y
V
151.27 561.47 151.27 523.28 2 L
N
163.6 518.03 155.18 514.51 160.46 521.96 162.03 519.99 4 Y
V
213.89 561.47 162.04 519.98 2 L
N
172.13 514.89 163.01 514.51 170.54 519.67 171.33 517.28 4 Y
V
221.72 534.07 171.34 517.28 2 L
N
(librairies) 229.54 534.07 T
225.63 514.5 264.77 557.55 R
0.22 H
N
54.4 483.19 265.75 757.16 C
27 0.39 639 792.39 C
293.15 0.39 905.15 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           34) 308.81 781.66 B
0 0 0 1 0 0 0 K
308.81 475.36 539.72 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 458.11 T
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 R
7 X
0 0 0 1 0 0 0 K
V
424.56 468.76 426.66 470.87 R
0 X
V
-0.07 H
0 Z
N
293.15 0.39 905.15 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 581.47 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
493.97 749.31 320.55 749.31 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(D\216claration des fonctions externes) 320.55 750.2 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(Le mot cl\216) 320.55 727.59 T
0 F
(extern) 371.6 727.59 T
2 F
( sert \210 :) 402.92 727.59 T
(\321) 320.55 711.94 T
1 F
(d\216clarer) 333.89 711.94 T
2 F
( dans un \336chier) 374.5 711.94 T
(\321 une fonction) 320.55 697.15 T
1 F
(d\216\336nie) 393.65 697.15 T
2 F
( dans un autre \336chier) 427.29 697.15 T
(\245) 320.55 672.8 T
386.26 672 326.52 672 2 L
V
N
(Cas ANSI-C) 326.52 672.8 T
(:) 386.26 672.8 T
0 F
(extern) 320.55 656.56 T
2 8.7 Q
( int ChercheV) 351.87 656.56 T
(al\050\337oat tab[ ], int taille, \337oat val\051) 403.92 656.56 T
0 10.44 Q
(;) 526.22 656.56 T
2 F
(\245) 320.55 632.35 T
396.13 631.56 326.52 631.56 2 L
V
N
(Cas non-ANSI) 326.52 632.35 T
(:) 396.13 632.35 T
0 F
(extern) 320.55 615.54 T
2 8.7 Q
( int ChercheV) 351.87 615.54 T
(al\050 \051 ;) 403.92 615.54 T
1 9.57 Q
(! Attention) 320.55 594.23 T
4 F
(: ne pas oublier le) 368.37 594.23 T
1 F
(;) 449.21 594.23 T
4 F
(  apr\217s la) 452.39 594.23 T
1 F
(\051) 494.4 594.23 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
359.4 561.01 320.55 561.01 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Objectif) 320.55 561.9 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(V\216ri\336cation par le compilateur :) 320.55 538.42 T
(\321 de la valeur retourn\216e) 320.55 522.76 T
(\321 du nombre d\325arguments) 320.55 507.98 T
2 7.83 Q
(  \050ANSI-C\051) 444.1 507.98 T
2 10.44 Q
(\321 des types des arguments) 320.55 493.19 T
2 7.83 Q
(  \050ANSI-C\051) 450.49 493.19 T
27 -389.06 639 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           35) 42.66 392.21 B
0 0 0 1 0 0 0 K
42.66 85.91 273.58 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 68.66 T
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 R
7 X
0 0 0 1 0 0 0 K
V
158.41 79.31 160.52 81.42 R
0 X
V
-0.07 H
0 Z
N
27 -389.06 639 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 192.02 TF
0 0 0 1 0 0 0 K
1 10.44 Q
0 0 0 1 0 0 0 K
(\336chier cherche.c :) 54.4 360.76 T
2 8.7 Q
(int ChercheV) 54.4 340.61 T
(al\050\337oat tab[ ], int taille, \337oat val\051) 104.03 340.61 T
({) 54.4 331.04 T
(    int k;) 54.4 321.47 T
(    for \050k = 0; k < taille; k++\051) 54.4 311.91 T
(        if \050tab[k] == val\051 return k;) 54.4 302.34 T
(    return -1;) 54.4 292.77 T
2 10.44 Q
(}) 54.4 277.26 T
2 8.7 Q
(___________________________________________) 54.4 266.68 T
1 10.44 Q
(\336chier main.c :) 54.4 251.17 T
2 8.7 Q
(#include <stdio.h>) 54.4 231.02 T
(#de\336ne CARD\050tab\051       \050 sizeof\050tab\051 / sizeof\050tab[0]\051 \051) 54.4 221.45 T
0 10.44 Q
(extern) 54.4 200.58 T
2 8.7 Q
( int ChercheV) 85.72 200.58 T
(al\050\337oat tab[ ], int taille, \337oat val\051) 137.77 200.58 T
0 10.44 Q
(;) 260.07 200.58 T
2 8.7 Q
(main\050\051) 54.4 181.44 T
({) 54.4 171.88 T
(    \337oat donnees[ ] = {1., 2., 3., 4., 5., 6., 7., 8., 9., 10.};) 54.4 162.31 T
(    int indice;) 54.4 152.74 T
-0.05 (    indice = ChercheV) 54.4 133.61 P
-0.05 (al \050donnees, CARD\050donnees\051, 4.\051;) 134.42 133.61 P
(    printf\050 "indice = %d , valeur = %f \134n",) 54.4 124.04 T
(              indice,  donnees[indice] \051;) 54.4 114.47 T
(}) 54.4 104.9 T
293.15 -389.06 905.15 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           36) 308.81 392.21 B
0 0 0 1 0 0 0 K
308.81 85.91 539.72 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 68.66 T
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 R
7 X
0 0 0 1 0 0 0 K
V
424.56 79.31 426.66 81.42 R
0 X
V
-0.07 H
0 Z
N
293.15 -389.06 905.15 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 192.02 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
361.73 359.87 320.55 359.87 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Headers) 320.55 360.76 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(Fichiers contenant des d\216clarations) 320.55 338.14 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
361.73 304.2 320.55 304.2 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Principe) 320.55 305.09 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\245) 320.55 283.35 T
5 F
(cherche) 326.52 283.35 T
3 F
(.c) 370.36 283.35 T
2 F
( -->) 382.88 283.35 T
0 F
(d\216\336nition) 401.73 283.35 T
2 F
( de) 448.7 283.35 T
4 F
(ChercheV) 466.11 283.35 T
(al) 512.13 283.35 T
2 F
(\245) 320.55 268.56 T
5 F
(cherche) 326.52 268.56 T
3 F
(.h) 370.36 268.56 T
2 F
( -->) 382.88 268.56 T
0 F
(d\216claration) 401.73 268.56 T
2 F
( de) 457.42 268.56 T
4 F
(ChercheV) 474.82 268.56 T
(al) 520.84 268.56 T
2 F
(Et:) 320.55 246.82 T
(\245) 320.55 231.16 T
(inclure) 326.52 231.16 T
5 F
(cherche) 360.16 231.16 T
3 F
(.h) 404 231.16 T
2 F
( dans tous les \336chiers) 416.52 231.16 T
0 F
(.c) 519.78 231.16 T
2 F
( qui appellent la fonction) 320.55 215.51 T
4 F
(ChercheV) 436 215.51 T
(al.) 482.02 215.51 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
365.21 181.57 320.55 181.57 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Objectifs) 320.55 182.46 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\245) 320.55 159.84 T
(lisibilit\216) 326.52 159.84 T
(\245) 320.55 145.06 T
(veri\336cation) 326.52 145.06 T
0 F
(syst\216matique) 379.3 145.06 T
2 F
( des types :) 446.01 145.06 T
(\321 de la valeur retourn\216e) 320.55 130.27 T
(\321 des arguments de la fonction) 320.55 115.49 T
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "mini" 9
%%Page: "mini" 10
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 0.39 639 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           37) 42.66 781.66 B
0 0 0 1 0 0 0 K
42.66 475.36 273.58 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 458.11 T
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 R
7 X
0 0 0 1 0 0 0 K
V
158.41 468.76 160.52 470.87 R
0 X
V
-0.07 H
0 Z
N
27 0.39 639 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 581.47 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
100.8 749.31 54.4 749.31 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Exemple:) 54.4 750.2 T
0 0 0 1 0 0 0 K
1 F
0 0 0 1 0 0 0 K
(header cherche.h :) 54.4 733.68 T
2 8.7 Q
(extern int ChercheV) 54.4 723.1 T
(al\050\337oat tab[ ], int taille, \337oat val\051;) 130.62 723.1 T
(___________________________________________) 54.4 713.53 T
1 10.44 Q
(header utile.h :) 54.4 698.02 T
2 8.7 Q
(#de\336ne CARD\050tab\051       \050 sizeof\050tab\051 / sizeof\050tab[0]\051 \051) 54.4 687.44 T
(___________________________________________) 54.4 677.87 T
1 10.44 Q
(\336chier cherche.c :) 54.4 662.36 T
2 8.7 Q
(#include "cherche.h") 54.4 651.78 T
(int ChercheV) 54.4 632.64 T
(al\050\337oat tab[ ], int taille, \337oat val\051) 104.03 632.64 T
({) 54.4 623.08 T
(    .......) 54.4 613.51 T
(}) 54.4 603.94 T
(___________________________________________) 54.4 594.37 T
1 10.44 Q
(\336chier main.c :) 54.4 578.86 T
2 8.7 Q
(#include <stdio.h>) 54.4 568.28 T
(#include "utile.h") 54.4 558.71 T
(#include "cherche.h") 54.4 549.15 T
(main\050\051) 54.4 530.01 T
({) 54.4 520.45 T
(    .......) 54.4 510.88 T
-0.05 (    indice = ChercheV) 54.4 501.31 P
-0.05 (al \050donnees, CARD\050donnees\051, 4.\051;) 134.42 501.31 P
(    .......) 54.4 491.74 T
293.15 0.39 905.15 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           38) 308.81 781.66 B
0 0 0 1 0 0 0 K
308.81 475.36 539.72 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 458.11 T
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 R
7 X
0 0 0 1 0 0 0 K
V
424.56 468.76 426.66 470.87 R
0 X
V
-0.07 H
0 Z
N
293.15 0.39 905.15 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 581.47 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
414.51 749.31 320.55 749.31 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Headers standards) 320.55 750.2 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
368.09 725.83 320.55 725.83 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(Fonction:) 320.55 726.72 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(D\216claration des fonctions des biblioth\217ques) 320.55 710.2 T
(\050i.e. printf\050\051, cos\050\051, strcpy\050\051 ...\051) 320.55 698.89 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
372.75 664.95 320.55 664.95 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Exemples:) 320.55 665.84 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\321 stdio.h     :   fonctions d\325entr\216es-sorties) 320.55 650.18 T
(\321 math.h     :   fonctions math\216matiques) 320.55 635.4 T
(\321 string.h    :   cha\224nes de caract\217res) 320.55 620.61 T
(\321 etc .....) 320.55 605.83 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
366.35 572.75 320.55 572.75 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Notation:) 320.55 573.64 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\321 header utilisateur  -->  #include) 320.55 557.99 T
3 F
(") 480.36 557.99 T
5 F
(truc.h) 486.62 557.99 T
3 F
(") 524.19 557.99 T
2 F
(\321 header standard   -->  #include) 320.55 543.2 T
3 F
(<) 479.21 543.2 T
5 F
(truc.h) 485.47 543.2 T
3 F
(>) 523.05 543.2 T
0 F
(< >) 320.55 520.59 T
2 F
(  => recherche dans) 335.64 520.59 T
(\321 r\216pertoires standard \050/usr/include ...\051) 320.55 504.93 T
(\321 r\216pertoires indiqu\216s en option de) 320.55 490.15 T
0 F
(cc) 488.78 490.15 T
27 -389.06 639 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           39) 42.66 392.21 B
0 0 0 1 0 0 0 K
42.66 85.91 273.58 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 68.66 T
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 R
7 X
0 0 0 1 0 0 0 K
V
158.41 79.31 160.52 81.42 R
0 X
V
-0.07 H
0 Z
N
27 -389.06 639 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 192.02 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
110.05 359.87 54.4 359.87 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(! Attention:) 54.4 360.76 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\245) 54.4 339.01 T
(fonction externe non d\216clar\216e) 60.38 339.01 T
(\245) 54.4 324.23 T
(qui retourne autre chose qu\325un) 60.38 324.23 T
0 F
(int) 207.74 324.23 T
2 F
(  => PROGRAMME F) 54.4 302.48 T
(AUX !!!) 153.58 302.48 T
1 F
( => ne P) 54.4 279.87 T
(AS oublier d\325inclure les headers) 93.66 279.87 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
100.8 245.93 54.4 245.93 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Exemple:) 54.4 246.82 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(Programme erron\216 sans le) 54.4 224.21 T
5 F
(#include) 183.74 224.21 T
2 F
( :) 233.84 224.21 T
3 9.57 Q
(#include <math.h>) 54.4 196.52 T
(main\050\051) 54.4 176.51 T
({) 54.4 166.51 T
(  double x;) 54.4 156.51 T
(  x = cos\0500.5\051) 54.4 136.51 T
(  printf\050"cos\0500.5\051 = %f \134n", x\051;) 54.4 126.5 T
(}) 54.4 116.5 T
293.15 -389.06 905.15 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           40) 308.81 392.21 B
0 0 0 1 0 0 0 K
308.81 85.91 539.72 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 68.66 T
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 R
7 X
0 0 0 1 0 0 0 K
V
424.56 79.31 426.66 81.42 R
0 X
V
-0.07 H
0 Z
N
293.15 -389.06 905.15 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 192.02 TF
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 15.66 Q
(V) 320.55 357.28 T
(ariables) 330.13 357.28 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
327.51 317.25 320.55 317.25 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(V) 320.55 318.14 T
0 1 1 0 1 0 0 K
437.14 317.25 326.93 317.25 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(ariables automatiques) 326.93 318.14 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\245) 320.55 295.52 T
(variables) 326.52 295.52 T
0 F
(locales) 371.18 295.52 T
2 F
( \210 une fonction) 406.58 295.52 T
(--> accessibles uniquement par cette fonction) 320.55 279.87 T
(\245) 320.55 247.69 T
(valeur initiale ind\216termin\216e) 326.52 247.69 T
(     \050sauf si initialisation explicite\051) 320.55 232.03 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
327.51 192 320.55 192 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(V) 320.55 192.89 T
0 1 1 0 1 0 0 K
469.64 192 326.93 192 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(ariables globales et externes) 326.93 192.89 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\245) 320.55 170.28 T
(var) 326.52 170.28 T
(.) 340.45 170.28 T
0 F
(globale) 346.25 170.28 T
2 F
( = var) 382.79 170.28 T
(. d\216clar\216e hors fonction) 408.61 170.28 T
(--> accessible par toutes les fonctions) 320.55 154.62 T
(\245) 320.55 122.44 T
(var) 326.52 122.44 T
(.) 340.45 122.44 T
0 F
(externe) 346.25 122.44 T
2 F
( = r\216f\216rence \210 une var) 383.38 122.44 T
(. globale) 485.2 122.44 T
1 F
-0.09 (d\216\336nie) 399.4 106.79 P
2 F
-0.09 ( dans un) 433.04 106.79 P
1 F
-0.09 (autre) 475.73 106.79 P
2 F
-0.09 ( \336chier) 501.24 106.79 P
FMENDPAGE
%%EndPage: "mini" 10
%%Page: "mini" 11
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 0.39 639 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           41) 42.66 781.66 B
0 0 0 1 0 0 0 K
42.66 475.36 273.58 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 458.11 T
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 R
7 X
0 0 0 1 0 0 0 K
V
158.41 468.76 160.52 470.87 R
0 X
V
-0.07 H
0 Z
N
27 0.39 639 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 581.47 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
100.8 749.31 54.4 749.31 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Exemple:) 54.4 750.2 T
0 0 0 1 0 0 0 K
1 F
0 0 0 1 0 0 0 K
(\336chier main.c :) 54.4 733.68 T
2 8.7 Q
(#include <stdio.h>) 54.4 713.53 T
(#include "cherche.h") 54.4 703.96 T
(#include "donnees.h") 54.4 694.4 T
(\337oat donnees[) 54.4 667.87 T
2 7.83 Q
(T) 109.04 667.87 T
(AILLE) 113.24 667.87 T
2 8.7 Q
(] = {                   /* var) 134.56 667.87 T
(. globale */) 215.56 667.87 T
(    1., 2., 3., 4., 5., 6., 7., 8., 9., 10.) 54.4 658.3 T
(};) 54.4 648.73 T
(void Af) 54.4 629.6 T
(\336che\050\051) 80.83 629.6 T
({) 54.4 620.03 T
(    int k;) 54.4 610.46 T
(    for \050k = 0; k <) 54.4 600.9 T
2 7.83 Q
(T) 117.73 600.9 T
(AILLE) 121.94 600.9 T
2 8.7 Q
(; k++\051) 143.26 600.9 T
(        printf \050" tab[%d] = %f \134n",  k,  donnees[k]\051;) 54.4 591.33 T
(}) 54.4 581.76 T
(main\050\051) 54.4 562.63 T
({) 54.4 553.06 T
(    int indice;) 54.4 543.49 T
(    Af) 54.4 524.36 T
(\336che\050\051;) 72.13 524.36 T
(    indice = ChercheV) 54.4 514.79 T
(al\050 4.\051;) 134.73 514.79 T
(    printf\050 "indice = %d , valeur = %f \134n",) 54.4 505.22 T
(              indice,  donnees[indice] \051;) 54.4 495.66 T
(}) 54.4 486.09 T
293.15 0.39 905.15 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           42) 308.81 781.66 B
0 0 0 1 0 0 0 K
308.81 475.36 539.72 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 458.11 T
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 R
7 X
0 0 0 1 0 0 0 K
V
424.56 468.76 426.66 470.87 R
0 X
V
-0.07 H
0 Z
N
293.15 0.39 905.15 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 581.47 TF
0 0 0 1 0 0 0 K
1 10.44 Q
0 0 0 1 0 0 0 K
(header donnees.h :) 320.55 750.2 T
2 8.7 Q
(#de\336ne) 320.55 730.06 T
2 7.83 Q
(T) 351.49 730.06 T
(AILLE) 355.7 730.06 T
2 8.7 Q
( 10) 377.02 730.06 T
(extern \337oat donnees[) 320.55 720.49 T
2 7.83 Q
(T) 401.77 720.49 T
(AILLE) 405.98 720.49 T
2 8.7 Q
(];) 427.3 720.49 T
(___________________________________________) 320.55 701.35 T
1 10.44 Q
(header cherche.h :) 320.55 676.28 T
2 8.7 Q
(extern int ChercheV) 320.55 656.13 T
(al\050\337oat val\051;) 396.76 656.13 T
(___________________________________________) 320.55 636.99 T
1 10.44 Q
(\336chier cherche.c :) 320.55 611.91 T
2 8.7 Q
(#include "donnees.h") 320.55 591.76 T
(#include "cherche.h") 320.55 582.2 T
(/* donnees = var) 320.55 563.06 T
(. externe d\216clar\216e dans donnes.h */) 383.65 563.06 T
(int ChercheV) 320.55 543.93 T
(al\050\337oat val\051) 370.17 543.93 T
({) 320.55 534.36 T
(    int k;) 320.55 524.79 T
(    for \050k = 0; k < T) 320.55 515.23 T
(AILLE; k++\051) 388.55 515.23 T
(        if \050donnees[k] == val\051 return k;) 320.55 505.66 T
(    return -1;) 320.55 496.09 T
(}) 320.55 486.53 T
27 -389.06 639 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           43) 42.66 392.21 B
0 0 0 1 0 0 0 K
42.66 85.91 273.58 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 68.66 T
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 R
7 X
0 0 0 1 0 0 0 K
V
158.41 79.31 160.52 81.42 R
0 X
V
-0.07 H
0 Z
N
27 -389.06 639 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 192.02 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
111.24 359.87 54.4 359.87 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Remarques) 54.4 360.76 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(La variable ") 54.4 344.23 T
5 F
(donnees) 112.05 344.23 T
2 F
(" est :) 155.89 344.23 T
(\321) 54.4 321.62 T
1 F
(d\216\336nie) 67.74 321.62 T
2 F
( dans) 101.38 321.62 T
5 F
(main.c) 129.81 321.62 T
2 F
(\321) 54.4 306.83 T
1 F
(d\216clar\216e) 67.74 306.83 T
2 F
( \050en externe\051 dans) 110.09 306.83 T
5 F
(main.h) 197.69 306.83 T
2 8.7 Q
(     \050et dans tous les \336chiers incluant) 54.4 297.12 T
5 F
(donnees.h) 195.07 297.12 T
2 F
(\051) 242.04 297.12 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
92.1 264.19 54.4 264.19 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(R\217gles:) 54.4 265.08 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\321) 54.4 249.43 T
1 F
(une seule) 67.74 249.43 T
4 F
(d\216\336nition) 118.79 249.43 T
2 F
(\321) 54.4 234.64 T
4 F
(d\216claration) 67.74 234.64 T
2 F
( compatible avec) 118.79 234.64 T
4 F
(d\216\336nition) 199.99 234.64 T
1 F
(! Attention) 54.4 202.46 T
2 F
( :) 106.57 202.46 T
(\245) 54.4 186.81 T
(si les types ne correspondent pas :) 60.38 186.81 T
(        => PROGRAMME F) 54.4 171.15 T
(AUX !!!) 170.99 171.15 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
97.9 137.21 54.4 137.21 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Conseils) 54.4 138.1 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\321 1 - \216viter les variables globales) 54.4 122.44 T
(\321 2 - les d\216clarer dans un header) 54.4 107.66 T
293.15 -389.06 905.15 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           44) 308.81 392.21 B
0 0 0 1 0 0 0 K
308.81 85.91 539.72 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 68.66 T
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 R
7 X
0 0 0 1 0 0 0 K
V
424.56 79.31 426.66 81.42 R
0 X
V
-0.07 H
0 Z
N
293.15 -389.06 905.15 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 192.02 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
327.51 359.87 320.55 359.87 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(V) 320.55 360.76 T
0 1 1 0 1 0 0 K
415.11 359.87 326.93 359.87 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(ariables statiques) 326.93 360.76 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\321 variables permanentes) 320.55 339.01 T
(\321 connues seulement du) 320.55 324.23 T
1 F
(\336chier) 441.79 324.23 T
2 F
(  ou de la) 473.11 324.23 T
1 F
(fonction) 332.15 308.57 T
2 F
( o\235 elles sont d\216\336nies) 373.32 308.57 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
366.95 274.63 320.55 274.63 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Exemple:) 320.55 275.52 T
0 0 0 1 0 0 0 K
394.21 258.2 320.55 258.2 2 L
0 0 0 1 0 0 0 K
V
0.48 H
N
1 F
(\336chier main.c :) 320.55 258.99 T
2 8.7 Q
(#include <stdio.h>) 320.55 238.85 T
(#include "cherche.h") 320.55 229.28 T
0 10.44 Q
(static) 320.55 202.75 T
2 8.7 Q
( \337oat donnees[) 347.81 202.75 T
2 7.83 Q
(T) 404.86 202.75 T
(AILLE) 409.07 202.75 T
2 8.7 Q
(] = {        /* var) 430.39 202.75 T
(. globale */) 484.79 202.75 T
(    1., 2., 3., 4., 5., 6., 7., 8., 9., 10.) 320.55 193.18 T
(};) 320.55 183.62 T
(void Af) 320.55 164.48 T
(\336che\050\051) 346.98 164.48 T
({) 320.55 154.92 T
0 10.44 Q
(static) 330.22 145.35 T
2 8.7 Q
( int n_ieme_fois = 1;) 357.48 145.35 T
(    int k;) 320.55 135.78 T
(    printf\050"J\325af) 320.55 116.65 T
(\336che pour la %d e fois\134n", n_ieme_fois\051;) 368.91 116.65 T
(    n_ieme_fois++;) 320.55 107.08 T
FMENDPAGE
%%EndPage: "mini" 11
%%Page: "mini" 12
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 0.39 639 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           45) 42.66 781.66 B
0 0 0 1 0 0 0 K
42.66 475.36 273.58 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 458.11 T
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 R
7 X
0 0 0 1 0 0 0 K
V
158.41 468.76 160.52 470.87 R
0 X
V
-0.07 H
0 Z
N
27 0.39 639 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 581.47 TF
0 0 0 1 0 0 0 K
2 8.7 Q
0 0 0 1 0 0 0 K
(    for \050k = 0; k <) 54.4 751.36 T
2 7.83 Q
(T) 117.73 751.36 T
(AILLE) 121.94 751.36 T
2 8.7 Q
(; k++\051) 143.26 751.36 T
(        printf \050" tab[%d] = %f \134n",  k,  donnees[k]\051;) 54.4 741.8 T
(}) 54.4 732.23 T
(main\050\051) 54.4 713.09 T
({) 54.4 703.53 T
(    int indice;) 54.4 693.96 T
(    Af) 54.4 674.83 T
(\336che\050\051;) 72.13 674.83 T
(    Af) 54.4 665.26 T
(\336che\050\051;) 72.13 665.26 T
(    indice = ChercheV) 54.4 655.69 T
(al\050donnees, T) 134.73 655.69 T
(AILLE, 4.\051;) 187.26 655.69 T
(    printf \050"indice = %d , valeur = %f \134n",) 54.4 646.12 T
(              indice, donnees[indice] \051;) 54.4 636.56 T
(    Af) 54.4 626.99 T
(\336che\050\051;) 72.13 626.99 T
(}) 54.4 617.42 T
(___________________________________________) 54.4 607.86 T
1 10.44 Q
(\336chier cherche.c :) 54.4 592.34 T
2 8.7 Q
(#include "cherche.h") 54.4 572.2 T
(                     /* la var) 54.4 562.63 T
(. donnees n\325est plus accessible */) 134.18 562.63 T
(int ChercheV) 54.4 543.49 T
(al\050\337oat tab[ ], int taille, \337oat val\051) 104.03 543.49 T
({) 54.4 533.93 T
(    int k;) 54.4 524.36 T
(    for \050k = 0; k < taille; k++\051) 54.4 514.79 T
(        if \050tab[k] == val\051 return k;) 54.4 505.22 T
(    return -1;) 54.4 495.66 T
(}) 54.4 486.09 T
293.15 0.39 905.15 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           46) 308.81 781.66 B
0 0 0 1 0 0 0 K
308.81 475.36 539.72 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 458.11 T
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 R
7 X
0 0 0 1 0 0 0 K
V
424.56 468.76 426.66 470.87 R
0 X
V
-0.07 H
0 Z
N
293.15 0.39 905.15 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 581.47 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
368.11 749.31 320.55 749.31 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Registres) 320.55 750.2 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\321 variables utilis\216es tr\217s fr\216quemment) 320.55 734.55 T
(\321 pour optimiser l\325ex\216cution) 320.55 719.76 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
406.38 686.69 320.55 686.69 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Structure de bloc) 320.55 687.58 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\321 code entre) 320.55 671.93 T
0 F
({) 389 671.93 T
2 F
(  et) 393.06 671.93 T
0 F
(}) 413.37 671.93 T
2 F
(\321 peuvent \220tre imbriqu\216s) 320.55 657.14 T
-0.07 (\321 chaque bloc peut contenir des d\216clarations) 320.55 642.36 P
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
366.95 609.28 320.55 609.28 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Exemple:) 320.55 610.17 T
0 0 0 1 0 0 0 K
2 8.7 Q
0 0 0 1 0 0 0 K
({) 320.55 592.2 T
(    int i, taille;) 320.55 582.63 T
(    ............etc......) 320.55 573.07 T
(    if \050i > taille\051) 320.55 553.93 T
(        return -1;) 320.55 544.36 T
(    else {) 320.55 534.8 T
0 10.44 Q
(register) 337.47 525.23 T
2 8.7 Q
( int k;) 375.76 525.23 T
(       for \050k = 0; k < taille; k++\051) 320.55 515.66 T
(            ......;) 320.55 506.09 T
(    }) 320.55 496.53 T
(}) 320.55 486.96 T
27 -389.06 639 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           47) 42.66 392.21 B
0 0 0 1 0 0 0 K
42.66 85.91 273.58 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 68.66 T
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 R
7 X
0 0 0 1 0 0 0 K
V
158.41 79.31 160.52 81.42 R
0 X
V
-0.07 H
0 Z
N
27 -389.06 639 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 192.02 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
110.67 359.87 54.4 359.87 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(R\216cursivit\216) 54.4 360.76 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(Les variables automatiques et les arguments) 54.4 344.23 T
(sont stock\216s dans la) 54.4 332.92 T
0 F
(pile) 151.86 332.92 T
2 8.7 Q
(\050sauf les tableaux pass\216s en arguments\051) 54.4 318.43 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
106.61 295.5 54.4 295.5 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Exemples:) 54.4 296.39 T
0 0 0 1 0 0 0 K
2 8.7 Q
0 0 0 1 0 0 0 K
(int fact\050int n\051) 54.4 278.42 T
({) 54.4 268.85 T
(    if \050n == 0\051  return 1;) 54.4 259.29 T
(    else return n * fact\050n - 1\051;) 54.4 249.72 T
(}) 54.4 240.15 T
(int fact2\050int n\051) 54.4 221.02 T
({) 54.4 211.45 T
(    return \050n == 0\051 ? 1 : n * fact2\050n - 1\051;) 54.4 201.88 T
(}) 54.4 192.31 T
(void printd\050int n\051) 54.4 173.18 T
({) 54.4 163.61 T
(    if \050n < 0\051 {) 54.4 154.05 T
(        putchar\050\325-\325\051;) 54.4 144.48 T
(        n = -n;) 54.4 134.91 T
(    }) 54.4 125.34 T
(    if \050n / 10\051  printd\050n / 10\051;) 54.4 115.78 T
(    putchar\050n % 10 + \3250\325\051;) 54.4 106.21 T
(}) 54.4 96.64 T
293.15 -389.06 905.15 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           48) 308.81 392.21 B
0 0 0 1 0 0 0 K
308.81 85.91 539.72 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 68.66 T
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 R
7 X
0 0 0 1 0 0 0 K
V
424.56 79.31 426.66 81.42 R
0 X
V
-0.07 H
0 Z
N
293.15 -389.06 905.15 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 192.02 TF
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 15.66 Q
(T) 320.55 357.28 T
(ableaux et Pointeurs) 328.95 357.28 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
434.8 317.25 320.55 317.25 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(D\216\336nition des tableaux) 320.55 318.14 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(syntaxe :) 320.55 301.61 T
1 F
(type) 337.96 285.09 T
2 F
( nom[) 359.42 285.09 T
4 F
(taille) 385.52 285.09 T
2 F
(];) 406.98 285.09 T
1 F
(type) 337.96 268.56 T
2 F
( nom[) 359.42 268.56 T
4 F
(nb_lignes) 385.52 268.56 T
2 F
(][) 430.19 268.56 T
4 F
(nb_colonnes) 435.99 268.56 T
2 F
(];) 495.17 268.56 T
(      etc ....) 320.55 252.04 T
(\321 \216l\216ments contigus) 320.55 222.47 T
(\321 indices allant de) 320.55 207.68 T
1 F
(0) 411.62 207.68 T
2 F
( \210) 417.42 207.68 T
1 F
(taille-1) 429.03 207.68 T
2 F
(\321 tableaux multi-dimensionnels) 320.55 192.89 T
(     --> \216l\216ments plac\216s en s\216quence) 320.55 177.24 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
369.28 149.82 320.55 149.82 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Exemples) 320.55 150.71 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(int vect[10];) 320.55 134.19 T
(\337oat mat[5][10];) 320.55 117.66 T
(double [5][10][20];) 320.55 101.14 T
FMENDPAGE
%%EndPage: "mini" 12
%%Page: "mini" 13
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 0.39 639 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           49) 42.66 781.66 B
0 0 0 1 0 0 0 K
42.66 475.36 273.58 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 458.11 T
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 R
7 X
0 0 0 1 0 0 0 K
V
158.41 468.76 160.52 470.87 R
0 X
V
-0.07 H
0 Z
N
27 0.39 639 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 581.47 TF
0 0 0 1 0 0 0 K
1 10.44 Q
0 0 0 1 0 0 0 K
(V) 54.4 750.2 T
(ecteur) 60.97 750.2 T
2 F
( :) 92.3 750.2 T
54.4 483.19 257.92 745.42 R
7 X
V
0.22 H
2 Z
0 X
N
97.45 710.46 254.01 732.31 R
7 X
V
0 X
N
113.11 732.31 113.11 710.46 2 L
N
128.76 732.31 128.76 710.46 2 L
N
144.42 732.31 144.42 710.46 2 L
N
238.35 732.31 238.35 710.46 2 L
N
222.7 732.31 222.7 710.46 2 L
N
(Indice    0    1    2                           T) 61.78 693.53 T
(-2  T) 225.99 693.53 T
(-1) 246.88 693.53 T
93.54 595.07 250.09 614.63 R
7 X
V
0 X
N
109.19 614.63 109.19 595.07 2 L
N
124.85 614.63 124.85 595.07 2 L
N
140.51 614.63 140.51 595.07 2 L
N
234.44 614.63 234.44 595.07 2 L
N
218.78 614.63 218.78 595.07 2 L
N
93.54 575.5 250.09 595.07 R
7 X
V
0 X
N
109.19 595.07 109.19 575.49 2 L
N
124.85 595.07 124.85 575.49 2 L
N
140.51 595.07 140.51 575.49 2 L
N
234.44 595.07 234.44 575.49 2 L
N
218.78 595.07 218.78 575.49 2 L
N
93.54 520.7 250.09 540.27 R
7 X
V
0 X
N
109.19 540.27 109.19 520.7 2 L
N
124.85 540.27 124.85 520.7 2 L
N
140.51 540.27 140.51 520.7 2 L
N
234.44 540.27 234.44 520.7 2 L
N
218.78 540.27 218.78 520.7 2 L
N
J
93.54 575.49 93.54 540.27 2 L
J
93.54 575.49 93.54 573.86 2 L
N
[7.206 6.245] 7.206 I
93.54 573.86 93.54 541.9 2 L
N
J
93.54 541.9 93.54 540.27 2 L
N
J
250.09 575.49 250.09 540.27 2 L
J
250.09 575.49 250.09 573.86 2 L
N
[7.206 6.245] 7.206 I
250.09 573.86 250.09 541.9 2 L
N
J
250.09 541.9 250.09 540.27 2 L
N
J
109.19 575.49 109.19 540.27 2 L
J
109.19 575.49 109.19 573.86 2 L
N
[7.206 6.245] 7.206 I
109.19 573.86 109.19 541.9 2 L
N
J
109.19 541.9 109.19 540.27 2 L
N
J
124.85 575.49 124.85 540.27 2 L
J
124.85 575.49 124.85 573.86 2 L
N
[7.206 6.245] 7.206 I
124.85 573.86 124.85 541.9 2 L
N
J
124.85 541.9 124.85 540.27 2 L
N
J
140.51 575.49 140.51 540.27 2 L
J
140.51 575.49 140.51 573.86 2 L
N
[7.206 6.245] 7.206 I
140.51 573.86 140.51 541.9 2 L
N
J
140.51 541.9 140.51 540.27 2 L
N
J
218.78 575.49 218.78 540.27 2 L
J
218.78 575.49 218.78 573.86 2 L
N
[7.206 6.245] 7.206 I
218.78 573.86 218.78 541.9 2 L
N
J
218.78 541.9 218.78 540.27 2 L
N
J
234.44 575.49 234.44 540.27 2 L
J
234.44 575.49 234.44 573.86 2 L
N
[7.206 6.245] 7.206 I
234.44 573.86 234.44 541.9 2 L
N
J
234.44 541.9 234.44 540.27 2 L
N
J
(Colonne 0   1    2                           C-2 C-1) 58.31 505.05 T
(Ligne) 62.23 622.46 T
(0) 70.06 602.89 T
(1) 70.06 583.32 T
(L-1) 66.14 526.9 T
J
1 F
(Matrice 2D :) 62.23 647.57 T
6 6.96 Q
(0      1       2                                                  C-2    C-1) 101.37 598.11 T
(C   C+1   C+2) 101.37 580.21 T
J
293.15 0.39 905.15 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           50) 308.81 781.66 B
0 0 0 1 0 0 0 K
308.81 475.36 539.72 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 458.11 T
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 R
7 X
0 0 0 1 0 0 0 K
V
424.56 468.76 426.66 470.87 R
0 X
V
-0.07 H
0 Z
N
293.15 0.39 905.15 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 581.47 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
389.58 749.31 320.55 749.31 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Adresses et V) 320.55 750.2 T
0 1 1 0 1 0 0 K
419.75 749.31 389 749.31 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(aleurs) 389 750.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Operateurs:) 320.55 727.59 T
2 F
(\321) 320.55 711.94 T
0 F
( &) 333.89 711.94 T
4 F
(c) 344.32 711.94 T
2 F
(  --->) 349.54 711.94 T
1 F
(adresse) 374.77 711.94 T
2 F
( d\325un objet) 414.22 711.94 T
4 F
(c) 465.28 711.94 T
2 F
(\321) 320.55 697.15 T
0 F
( *) 333.89 697.15 T
4 F
(a) 340.85 697.15 T
2 F
(  --->) 349.55 697.15 T
1 F
(valeur) 374.78 697.15 T
2 F
( point\216e par une adresse) 405.52 697.15 T
4 F
(a) 523.88 697.15 T
2 F
(\245) 320.55 665.84 T
4 F
(Adresse) 326.52 665.84 T
2 F
( du i\217me \216l\216ment du tableau) 364.81 665.84 T
4 F
(vect) 499.4 665.84 T
2 F
(:) 518.54 665.84 T
0 F
(&) 361.17 650.18 T
2 F
(vect[i] ==) 368.7 650.18 T
0 F
(&) 413.96 650.18 T
2 F
(\050vect[i]\051) 421.49 650.18 T
(\245) 320.55 628.44 T
4 F
(Adresse) 326.52 628.44 T
2 F
( du 1er elt. de) 364.81 628.44 T
4 F
(vect) 431.53 628.44 T
2 F
( :) 450.67 628.44 T
0 F
(&) 361.17 612.78 T
2 F
(vect[0] == vect) 368.7 612.78 T
(\245) 320.55 591.04 T
4 F
(V) 326.52 591.04 T
(aleur) 333.1 591.04 T
2 F
( du i\217me elt. de) 356.3 591.04 T
4 F
(vect) 430.56 591.04 T
2 F
( :) 449.7 591.04 T
(              vect[i] ==) 320.55 575.38 T
0 F
(*) 406.42 575.38 T
2 F
(\050vect + i\051) 410.48 575.38 T
(\245) 320.55 543.2 T
4 F
(Adresse) 326.52 543.2 T
2 F
( de l\325elt. \050x,y\051 de) 364.81 543.2 T
4 F
(mat) 441.37 543.2 T
2 F
( :) 458.77 543.2 T
0 F
(&) 361.17 527.55 T
2 F
(mat[y][x]) 368.7 527.55 T
(\245) 320.55 505.8 T
4 F
(V) 326.52 505.8 T
(aleur) 333.1 505.8 T
2 F
( de l\325elt. \050x,y\051 de) 356.3 505.8 T
4 F
(mat) 432.87 505.8 T
2 F
( :) 450.27 505.8 T
(        mat[y][x]  ==) 320.55 490.15 T
0 F
(*) 404.1 490.15 T
2 F
(\050mat + y * nb_col + x\051) 408.15 490.15 T
27 -389.06 639 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           51) 42.66 392.21 B
0 0 0 1 0 0 0 K
42.66 85.91 273.58 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 68.66 T
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 R
7 X
0 0 0 1 0 0 0 K
V
158.41 79.31 160.52 81.42 R
0 X
V
-0.07 H
0 Z
N
27 -389.06 639 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 192.02 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
181.43 359.87 54.4 359.87 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Initialisation des tableaux) 54.4 360.76 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(initialisation possible lors de la d\216\336nition :) 54.4 338.14 T
(int  vect[10] = {1, 2, 3};) 54.4 315.53 T
(int  toto[] = {1, 2, 3};) 54.4 299 T
(\245) 54.4 273.35 T
(cardinal = 10 dans le 1er cas \050mais seuls) 60.38 273.35 T
(les trois premiers elts. sont initialis\216s\051) 60.38 262.91 T
(\245) 54.4 242.04 T
(cardinal) 60.38 242.04 T
1 F
(implicite) 99.82 242.04 T
2 F
( = 3 dans le second cas) 142.16 242.04 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
60.78 202.88 54.4 202.88 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(T) 54.4 203.77 T
0 1 1 0 1 0 0 K
209.64 202.88 60 202.88 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(ableaux multi-dimensionnels :) 60 203.77 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
-0.16 (\337oat  mat[5][10] = {{1, 2, 3, 4}, {5, 6}, {7, 8, 9}};) 54.4 177.67 P
(\337oat  truc[][10] = {{1, 2, 3, 4}, {5, 6}, {7, 8, 9}};) 54.4 161.15 T
(\245) 54.4 135.49 T
(initialisation ligne par ligne) 60.38 135.49 T
(\245) 54.4 114.62 T
(nombre de) 60.38 114.62 T
1 F
(lignes) 113.17 114.62 T
2 F
( \216ventuellement implicite) 143.33 114.62 T
(\050mais le nb. de colonnes doit \220tre d\216\336ni\051) 60.38 104.18 T
293.15 -389.06 905.15 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           52) 308.81 392.21 B
0 0 0 1 0 0 0 K
308.81 85.91 539.72 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 68.66 T
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 R
7 X
0 0 0 1 0 0 0 K
V
424.56 79.31 426.66 81.42 R
0 X
V
-0.07 H
0 Z
N
293.15 -389.06 905.15 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 192.02 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
377.39 359.87 320.55 359.87 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Remarques) 320.55 360.76 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
-0.06 (\321 les initialiseurs doivent \220tre des constantes) 320.55 345.1 P
(\321 restrictions si C non-ANSI :) 320.55 324.23 T
(    les tableaux doivent alors \220tre "static") 320.55 308.57 T
(\321 pour obtenir le cardinal d\325un vecteur d\216\336ni) 320.55 286.83 T
(  implicitement:) 326.53 276.39 T
2 8.7 Q
(#de\336ne CARD\050arr\051   \050sizeof\050arr\051 / sizeof\050arr[0]\051\051) 320.55 250.15 T
(double vect[] = {1., 2., 3., };) 320.55 231.02 T
(int card = CARD\050vect\051;) 320.55 221.45 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
454.53 188.52 320.55 188.52 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Param\216trage des fonctions) 320.55 189.42 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(Exemple :) 320.55 172.89 T
(          void foo\050int tab[], \337oat mat[][10]\051) 320.55 156.36 T
(Omission possible :) 320.55 133.75 T
(\321 du cardinal de) 320.55 118.1 T
4 F
(tab) 402.34 118.1 T
2 F
(\321 du nb. de lignes de) 320.55 103.31 T
4 F
(mat) 424.98 103.31 T
FMENDPAGE
%%EndPage: "mini" 13
%%Page: "mini" 14
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 0.39 639 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           53) 42.66 781.66 B
0 0 0 1 0 0 0 K
42.66 475.36 273.58 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 458.11 T
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 R
7 X
0 0 0 1 0 0 0 K
V
158.41 468.76 160.52 470.87 R
0 X
V
-0.07 H
0 Z
N
27 0.39 639 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 581.47 TF
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 15.66 Q
(Pointeurs) 54.4 746.73 T
0 0 0 1 0 0 0 K
2 10.44 Q
0 0 0 1 0 0 0 K
(\245) 54.4 710.63 T
(variables contenant une) 60.38 710.63 T
1 F
(adresse) 174.09 710.63 T
2 F
(\245) 54.4 695.84 T
(les pointeurs sont \050g\216n\216ralement\051) 60.38 695.84 T
1 F
(typ\216s) 218.74 695.84 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
97.33 669.3 54.4 669.3 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Exemple) 54.4 670.19 T
0 0 0 1 0 0 0 K
2 8.7 Q
0 0 0 1 0 0 0 K
(int i, *p;            /* p = pointeur d\325entier */) 54.4 652.21 T
(p = &i;) 54.4 635.69 T
(*p = 5;) 54.4 626.12 T
(printf\050"%d %d \134n",  *p, i\051;) 54.4 616.55 T
(i = 7;) 54.4 606.99 T
(printf\050"%d %d \134n",  *p, i\051;) 54.4 597.42 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
256.83 564.49 54.4 564.49 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Passage d\325arguments dans les fonctions) 54.4 565.38 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\245) 54.4 543.64 T
(passage par) 60.38 543.64 T
0 F
(valeur) 120.71 543.64 T
2 F
(\050sauf pour les tableaux\051) 154.36 543.64 T
(  --> les arguments transmis sont) 54.4 527.98 T
0 F
(recopi\216s) 209.56 527.98 T
2 F
(\245) 54.4 506.24 T
(passage par) 60.38 506.24 T
0 F
(adresse) 120.71 506.24 T
2 F
( \050pas de recopie\051) 160.16 506.24 T
(  --> utiliser les) 54.4 490.58 T
1 F
(pointeurs) 125.44 490.58 T
293.15 0.39 905.15 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           54) 308.81 781.66 B
0 0 0 1 0 0 0 K
308.81 475.36 539.72 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 458.11 T
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 R
7 X
0 0 0 1 0 0 0 K
V
424.56 468.76 426.66 470.87 R
0 X
V
-0.07 H
0 Z
N
293.15 0.39 905.15 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 581.47 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
366.95 749.31 320.55 749.31 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Exemple:) 320.55 750.2 T
0 0 0 1 0 0 0 K
2 8.7 Q
0 0 0 1 0 0 0 K
(void swap1\050 int i, int j \051              /* ne fait rien */) 320.55 732.23 T
({) 320.55 722.66 T
(   int  aux;) 320.55 713.09 T
(   aux = i;  i = j;  j = aux;) 320.55 703.53 T
(}) 320.55 693.96 T
(main\050\051) 320.55 674.83 T
({) 320.55 665.26 T
(  int a = 5, b = 0;) 320.55 655.69 T
(  swap1\050a, b\051;) 320.55 646.12 T
(  printf\050" a = %d, b = %d \134n", a, b\051;) 320.55 636.56 T
(}) 320.55 626.99 T
(___________________________________________) 320.55 617.42 T
(void swap2\050 int *pi, int *pj \051      /* echange les valeurs */) 320.55 598.29 T
({) 320.55 588.72 T
(   int  aux;) 320.55 579.15 T
(   aux = *pi;  *pi = *pj;  *pj = aux;) 320.55 569.59 T
(}) 320.55 560.02 T
(main\050\051) 320.55 540.88 T
({) 320.55 531.32 T
(  int a = 5, b = 0;) 320.55 521.75 T
(  swap2\050&a, &b\051;) 320.55 512.18 T
(  printf\050" a = %d, b = %d \134n", a, b\051;) 320.55 502.62 T
(}) 320.55 493.05 T
27 -389.06 639 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           55) 42.66 392.21 B
0 0 0 1 0 0 0 K
42.66 85.91 273.58 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 68.66 T
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 R
7 X
0 0 0 1 0 0 0 K
V
158.41 79.31 160.52 81.42 R
0 X
V
-0.07 H
0 Z
N
27 -389.06 639 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 192.02 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
123.99 359.87 54.4 359.87 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Pointeurs et T) 54.4 360.76 T
0 1 1 0 1 0 0 K
162.09 359.87 123.22 359.87 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(ableaux) 123.22 360.76 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(Les pointeurs et tableaux C sont intimement) 54.4 338.14 T
(li\216s :) 54.4 326.84 T
2 8.7 Q
(\337oat *p, *q, tab[] = {1, 2, 3, 4, 5};) 54.4 306.69 T
(p = &tab[2];) 54.4 289.73 T
(printf\050"%f %f \134n",  *p, tab[2]\051;) 54.4 280.16 T
(p = tab + 2;) 54.4 263.2 T
(printf\050"%f %f \134n",  *p, tab[2]\051;) 54.4 253.63 T
(*p = 0.0;) 54.4 236.67 T
(printf\050"%f %f \134n",  *p, tab[2]\051;) 54.4 227.1 T
(q = p++;) 54.4 210.14 T
(*\050q+2\051 = 777.77;) 54.4 200.58 T
(printf\050"%f %f \134n",  *p, *q\051;) 54.4 191.01 T
2 10.44 Q
(V) 54.4 165.93 T
(aleur des \216l\216ments de tab ?) 60.59 165.93 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
86.87 142.43 54.4 142.43 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Notes:) 54.4 143.32 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\321 les notations:        tab[i]   et   *\050tab + i\051) 54.4 127.66 T
(   sont \216quivalentes) 60.38 117.23 T
(\321 tab  ==  &tab[0]  ==) 54.4 102.44 T
1 F
(adresse) 162.91 102.44 T
2 F
( du tableau) 202.37 102.44 T
293.15 -389.06 905.15 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           56) 308.81 392.21 B
0 0 0 1 0 0 0 K
308.81 85.91 539.72 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 68.66 T
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 R
7 X
0 0 0 1 0 0 0 K
V
424.56 79.31 426.66 81.42 R
0 X
V
-0.07 H
0 Z
N
293.15 -389.06 905.15 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 192.02 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
376.2 359.87 320.55 359.87 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(! Attention:) 320.55 360.76 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\321 un pointeur) 320.55 345.1 T
1 F
(est) 389 345.1 T
2 F
( une) 404.08 345.1 T
1 F
(variable) 427.3 345.1 T
2 F
(\321 un tableau) 320.55 330.31 T
1 F
(n\325est pas) 385.53 330.31 T
2 F
( une variable !!!) 430.77 330.31 T
2 8.7 Q
(i.e:) 320.55 316.69 T
(        p = tab;    p++;            /* CORRECT */) 320.55 302.77 T
(        tab = p;    tab++;         ARCHI-F) 320.55 288.86 T
(AUX !!!!) 460.04 288.86 T
363.48 258.1 320.55 258.1 2 L
V
N
0 10.44 Q
(Exemple) 320.55 258.99 T
2 F
(:  calcul de la longueur d\325une string) 363.48 258.99 T
2 8.7 Q
(int strlen\050char *s\051                 /* V) 320.55 238.85 T
(ersion 1 */) 440.92 238.85 T
({) 320.55 229.28 T
(    int n;) 320.55 219.71 T
(    for \050n = 0; *s != \325\1340\325; s++\051) 320.55 210.14 T
(        n++;) 320.55 200.58 T
(    return n;) 320.55 191.01 T
(}) 320.55 181.44 T
(int strlen\050char *s\051                 /* V) 320.55 155.35 T
(ersion 2 */) 440.92 155.35 T
({) 320.55 145.78 T
(    char *p = s;) 320.55 136.22 T
(    while \050*p\051) 320.55 126.65 T
(        p++;) 320.55 117.08 T
(    return p - s;            /* nombre de char entre s et p*/) 320.55 107.51 T
(}) 320.55 97.95 T
FMENDPAGE
%%EndPage: "mini" 14
%%Page: "mini" 15
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 0.39 639 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           57) 42.66 781.66 B
0 0 0 1 0 0 0 K
42.66 475.36 273.58 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 458.11 T
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 R
7 X
0 0 0 1 0 0 0 K
V
158.41 468.76 160.52 470.87 R
0 X
V
-0.07 H
0 Z
N
27 0.39 639 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 581.47 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
140.22 749.31 54.4 749.31 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Arithm\216tique et T) 54.4 750.2 T
0 1 1 0 1 0 0 K
228.77 749.31 139.45 749.31 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(ype des pointeurs) 139.45 750.2 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(Les pointeurs sont normalement) 54.4 724.11 T
1 F
(typ\216s) 206.38 724.11 T
2 F
(sauf :) 54.4 707.59 T
0 F
(void *p) 88.63 707.59 T
2 F
(   :  pointeur non typ\216) 123.43 707.59 T
(Af) 54.4 674.54 T
(fectation entre pointeurs de types dif) 64.07 674.54 T
(f\216rents) 232.13 674.54 T
( --> utiliser des "casts" :) 54.4 658.01 T
2 8.7 Q
(int i;                        /* un "int" occupe 2 ou 4 octets */) 54.4 637.86 T
(char *pc;                /* un "char" occupe 1 octet */) 54.4 628.29 T
(pc = \050char *\051&i;      /* pc pointe sur le 1er octet de i */) 54.4 618.73 T
110.05 585.89 54.4 585.89 2 L
V
0.48 H
N
1 10.44 Q
(! Attention:) 54.4 586.69 T
2 F
(l\325) 54.4 564.08 T
4 F
(arithm\216tique) 59.03 564.08 T
2 F
(sur les pointeurs n\325a de sens) 119.36 564.08 T
-0.12 (que lorsque qu\325ils sont typ\216s et de m\220me type) 54.4 552.77 P
2 8.7 Q
(char  tabchar[10], *pc = tabchar;) 54.4 532.62 T
(int     tabint[10],    *pi = tabint;) 54.4 523.05 T
(pc = pc + 5;    --->  5) 54.4 503.92 T
0 7.83 Q
(caract\217res) 135.38 503.92 T
2 8.7 Q
( plus loin \050= 5 octets\051) 174.54 503.92 T
(pi  = pi  + 5;    --->  5) 54.4 494.35 T
0 F
(entiers) 135.38 494.35 T
2 F
( plus loin \050= 20 octets\051) 163.9 494.35 T
293.15 0.39 905.15 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           58) 308.81 781.66 B
0 0 0 1 0 0 0 K
308.81 475.36 539.72 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 458.11 T
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 R
7 X
0 0 0 1 0 0 0 K
V
424.56 468.76 426.66 470.87 R
0 X
V
-0.07 H
0 Z
N
293.15 0.39 905.15 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 581.47 TF
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 15.66 Q
(M\216moire dynamique) 320.55 746.73 T
0 0 0 1 0 0 0 K
2 10.44 Q
0 0 0 1 0 0 0 K
(Pour cr\216\216r) 320.55 707.59 T
(, agrandir ou d\216truire) 368.69 707.59 T
1 F
(dynamique-) 468.47 707.59 T
(ment) 320.55 696.28 T
2 F
( des objets pendant l\325\216x\216cution.) 345.48 696.28 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
361.73 662.34 320.55 662.34 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Principe) 320.55 663.23 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\321 faire pointer un pointeur ad\216quat,) 320.55 647.57 T
-0.14 (\321 sur une "zone m\216moire" sp\216cialement cr\216\216) 320.55 632.79 P
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
431.9 599.72 320.55 599.72 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Fonctions principales:) 320.55 600.61 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\245) 320.55 584.95 T
0 F
(malloc) 326.52 584.95 T
2 F
(\050\051,) 359.59 584.95 T
0 F
(calloc) 372.34 584.95 T
2 F
(\050\051 : allouent de la m\216moire) 401.93 584.95 T
(\245) 320.55 570.17 T
0 F
(free) 326.52 570.17 T
2 F
(\050\051 : lib\217re la m\216moire point\216e) 345.67 570.17 T
(\245) 320.55 555.38 T
0 F
(realloc) 326.52 555.38 T
2 F
(\050\051 : r\216alloue de la m\216moire) 360.17 555.38 T
(\245) 320.55 540.59 T
0 F
(sizeof) 326.52 540.59 T
2 F
(\050\051 : taille \050en octets\051 d\325un objet C) 356.1 540.59 T
(De plus:) 320.55 518.85 T
(constante) 320.55 502.33 T
0 F
(NULL) 368.7 502.33 T
2 F
( = valeur que doit avoir un) 396.53 502.33 T
(pointeur ind\216\336ni \050i.e. qui ne pointe sur rien\051) 320.55 491.02 T
27 -389.06 639 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           59) 42.66 392.21 B
0 0 0 1 0 0 0 K
42.66 85.91 273.58 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 68.66 T
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 R
7 X
0 0 0 1 0 0 0 K
V
158.41 79.31 160.52 81.42 R
0 X
V
-0.07 H
0 Z
N
27 -389.06 639 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 192.02 TF
0 0 0 1 0 0 0 K
2 8.7 Q
0 0 0 1 0 0 0 K
(#include <stdio.h>) 54.4 361.92 T
(\337oat *NewV) 54.4 342.78 T
(ect\050int card\051) 99.36 342.78 T
({) 54.4 333.21 T
(    \337oat *p = malloc\050card * sizeof\050\337oat\051\051;) 54.4 323.65 T
(    if \050p == NULL\051) 54.4 314.08 T
(        fprintf\050stderr) 54.4 304.51 T
(, "! Plus de m\216moire disponible \134n"\051;) 120.14 304.51 T
(    return p;) 54.4 294.95 T
(}) 54.4 285.38 T
(------------------------------------------------------------------------) 54.4 275.81 T
(\337oat *AddV) 54.4 266.24 T
(ect\050\337oat v1[], \337oat v2[], int card\051) 97.43 266.24 T
({) 54.4 256.68 T
(    int k;) 54.4 247.11 T
(    \337oat *newv = NewV) 54.4 237.54 T
(ect\050card\051;) 139.24 237.54 T
(    if \050p\051 {) 54.4 221.02 T
(        for \050k = 0; k < card; k++\051) 54.4 211.45 T
(            newv[k] = v1[k] + v2[k];) 54.4 201.88 T
(    }) 54.4 192.31 T
(    return newv;) 54.4 182.75 T
(}) 54.4 173.18 T
(------------------------------------------------------------------------) 54.4 163.61 T
(main\050\051) 54.4 154.05 T
({) 54.4 144.48 T
(    \337oat u[3] = {1., 2., 3.},  v[3] = {4., 5., 6.}, *res;) 54.4 134.91 T
(    res = AddV) 54.4 118.39 T
(ect\050u, v) 106.86 118.39 T
(, 3\051;) 134.74 118.39 T
(    ......etc....) 54.4 108.82 T
(}) 54.4 99.25 T
293.15 -389.06 905.15 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           60) 308.81 392.21 B
0 0 0 1 0 0 0 K
308.81 85.91 539.72 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 68.66 T
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 R
7 X
0 0 0 1 0 0 0 K
V
424.56 79.31 426.66 81.42 R
0 X
V
-0.07 H
0 Z
N
293.15 -389.06 905.15 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 192.02 TF
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 15.66 Q
(Cha\224nes de Caract\217res) 320.55 357.28 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(\050Strings\051) 320.55 341.62 T
0 0 0 1 0 0 0 K
2 10.44 Q
0 0 0 1 0 0 0 K
-0.47 (Suite de caract\217res termin\216e par le) 320.55 302.48 P
1 F
-0.47 (caract\217re) 483.05 302.48 P
(nul \325\1340\325) 320.55 291.18 T
4 F
( \050de valeur enti\217re \216gale \210 0\051) 353.61 291.18 T
2 F
-0.06 (Les Strings peuvent \220tre d\216\336nies de 2 fa\215ons:) 320.55 258.12 P
(\321 par un) 320.55 236.38 T
0 F
(tableau de caract\217res) 366.38 236.38 T
2 F
( :) 473.11 236.38 T
(    char stab[] = "abcde";) 320.55 220.73 T
(\321 par une) 320.55 198.98 T
0 F
(constante cha\224ne) 372.18 198.98 T
(:) 460.34 198.98 T
2 F
(    char *sptr = "abcde";) 320.55 183.33 T
(\245) 320.55 151.15 T
4 F
(stab) 326.52 151.15 T
2 F
(  est un) 346.25 151.15 T
0 F
(tableau) 383.39 151.15 T
2 F
( de 6 \216l\216ments) 419.92 151.15 T
(\050en comptant le 0 \336nal\051) 326.53 140.71 T
(\245) 320.55 119.84 T
4 F
(sptr) 326.52 119.84 T
2 F
(  est un) 343.92 119.84 T
0 F
(pointeur) 381.06 119.84 T
2 F
( sur une) 422.81 119.84 T
1 F
(constante) 463.42 119.84 T
2 F
(\050contenu) 326.53 109.4 T
1 F
(non modi\336able) 370.04 109.4 T
2 F
(\051) 447.17 109.4 T
FMENDPAGE
%%EndPage: "mini" 15
%%Page: "mini" 16
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 0.39 639 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           61) 42.66 781.66 B
0 0 0 1 0 0 0 K
42.66 475.36 273.58 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 458.11 T
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 R
7 X
0 0 0 1 0 0 0 K
V
158.41 468.76 160.52 470.87 R
0 X
V
-0.07 H
0 Z
N
27 0.39 639 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 581.47 TF
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 15.66 Q
(T) 54.4 746.73 T
(ableaux de pointeurs) 62.81 746.73 T
0 0 0 1 0 0 0 K
2 10.44 Q
0 0 0 1 0 0 0 K
(T) 54.4 709.76 T
(ableaux pointant sur des objets de taille) 59.62 709.76 T
(quelconque) 54.4 698.45 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
106.61 674.08 54.4 674.08 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(Exemples:) 54.4 674.97 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\321 tableau d\325objets que l\325on veut trier) 54.4 659.32 T
(\321 matrice dynamique 2D ou 3D) 54.4 644.53 T
(  \050vecteur colonne de vecteurs lignes, etc...\051) 60.38 634.09 T
(\321 tableau de strings composant un texte) 54.4 619.31 T
2 8.7 Q
(static char *jour[ ] = {) 54.4 600.03 T
(    "Lundi",) 54.4 590.46 T
(    "Mardi",) 54.4 580.89 T
(    "Mercredi",) 54.4 571.33 T
(    "Jeudi",) 54.4 561.76 T
(    "V) 54.4 552.19 T
(endredi",) 72.48 552.19 T
(    "Samedi",) 54.4 542.62 T
(    "Dimanche",) 54.4 533.06 T
(    NULL) 54.4 523.49 T
(};) 54.4 513.92 T
0 F
(Nota) 54.4 497.4 T
2 F
(:) 73.72 497.4 T
4 F
(jour) 83.4 497.4 T
2 F
( = tableau de pointeurs pointant sur des) 97.89 497.4 T
(constantes cha\353nes \050NULL indique la \336n du tableau\051) 54.4 488.26 T
293.15 0.39 905.15 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           62) 308.81 781.66 B
0 0 0 1 0 0 0 K
308.81 475.36 539.72 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 458.11 T
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 467.46 427.93 470.87 R
7 X
0 0 0 1 0 0 0 K
V
424.56 468.76 426.66 470.87 R
0 X
V
-0.07 H
0 Z
N
293.15 0.39 905.15 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 581.47 TF
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
0 15.66 Q
(Structures) 320.55 746.73 T
0 0 0 1 0 0 0 K
2 10.44 Q
0 0 0 1 0 0 0 K
-0.07 (Agr\216gat de plusieurs objets de types quelcon-) 320.55 707.59 P
(ques.) 320.55 696.28 T
(--> g\216n\216ralisation des) 320.55 679.75 T
4 F
("records") 424.09 679.75 T
2 F
( de Pascal,) 466.3 679.75 T
(Cobol, etc ...) 320.55 668.45 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
469.58 634.51 320.55 634.51 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(D\216\336nition d\325un type structure:) 320.55 635.4 T
0 0 0 1 0 0 0 K
1 F
0 0 0 1 0 0 0 K
(struct) 320.55 616.26 T
2 F
(  nom_struct) 349.54 616.26 T
1 F
({) 409.87 616.26 T
2 F
(    type1  variable1;) 320.55 604.96 T
(    type2  variable2;) 320.55 593.65 T
(    ......) 320.55 582.34 T
1 F
(};) 320.55 571.04 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
522.96 542.75 320.55 542.75 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
(D\216\336nition de variables de type structure:) 320.55 543.64 T
0 0 0 1 0 0 0 K
1 F
0 0 0 1 0 0 0 K
(struct) 320.55 520.59 T
2 F
(  nom_struct  var1, var2, tab[10], *ptr;) 349.54 520.59 T
(ou) 320.55 504.5 T
1 F
(struct) 320.55 487.97 T
2 F
(  nom_struct  { .... } var1, var2, etc...;) 349.54 487.97 T
27 -389.06 639 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           63) 42.66 392.21 B
0 0 0 1 0 0 0 K
42.66 85.91 273.58 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 68.66 T
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 78.01 161.78 81.42 R
7 X
0 0 0 1 0 0 0 K
V
158.41 79.31 160.52 81.42 R
0 X
V
-0.07 H
0 Z
N
27 -389.06 639 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 192.02 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
100.8 359.87 54.4 359.87 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Exemple:) 54.4 360.76 T
0 0 0 1 0 0 0 K
193.63 359.96 100.8 359.96 2 L
0 0 0 1 0 0 0 K
V
N
2 F
(  points dans le plan) 100.8 360.76 T
2 8.7 Q
(struct POINT {) 54.4 340.61 T
(    double x;) 54.4 331.04 T
(    double y;) 54.4 321.47 T
(};) 54.4 311.91 T
(main\050\051) 54.4 292.77 T
({) 54.4 283.2 T
(    struct POINT p1 = {4.1, 7.3} , p2, ptab[10];) 54.4 273.64 T
(    p2 = p1;) 54.4 254.5 T
(    p2.x = 18.; p2.y = 21.;) 54.4 244.93 T
(    ptab[7] = p1;) 54.4 235.37 T
(    ptab[8].x = p2.x;) 54.4 225.8 T
(    ....etc....) 54.4 216.23 T
(}) 54.4 206.67 T
2 10.44 Q
(\321 initialisation similaire aux tableaux) 54.4 182.46 T
(\321 acc\217s aux membres de la struct par) 54.4 161.58 T
0 F
(.) 238.85 161.58 T
2 F
(\321 l\325af) 54.4 140.71 T
(fectation entre 2 structs. est permise) 80.89 140.71 T
(   \050si elles sont de m\220me type\051) 60.38 130.27 T
(\321 les structs. peuvent \220tre param\217tres des) 54.4 109.4 T
(   fonctions \050et sont transmises par valeur\051) 60.38 98.96 T
293.15 -389.06 905.15 402.94 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           64) 308.81 392.21 B
0 0 0 1 0 0 0 K
308.81 85.91 539.72 379.46 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 409.19 73.88 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 413.17 68.66 T
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
424.52 78.01 427.93 81.42 R
7 X
0 0 0 1 0 0 0 K
V
424.56 79.31 426.66 81.42 R
0 X
V
-0.07 H
0 Z
N
293.15 -389.06 905.15 402.94 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 535.48 192.02 TF
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
431.33 359.87 320.55 359.87 2 L
0 1 1 0 1 0 0 K
V
0.33 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Structures imbriqu\216es) 320.55 360.76 T
0 0 0 1 0 0 0 K
2 8.7 Q
0 0 0 1 0 0 0 K
(#include <stdio.h>) 320.55 340.61 T
(#include <string.h>) 320.55 331.04 T
(struct RECT {) 320.55 311.91 T
(    POINT top_left;) 320.55 302.34 T
(    POINT bot_right;) 320.55 292.77 T
(};) 320.55 283.2 T
(main\050\051) 320.55 264.07 T
({) 320.55 254.5 T
(    struct RECT rect1, rect2 = {{1., 2.}, {3., 4.}};) 320.55 244.93 T
(    struct POINT p1 = {1., 2.}, p2 = {3., 4.}) 320.55 235.37 T
(    rect1.top_left   = p1;) 320.55 216.23 T
(    rect1.bot_right = p2;) 320.55 206.67 T
(    printf\050" rect1 = \050%d, %d\051 x \050%d, %d\051 \134n",) 320.55 187.53 T
(             rect1.top_left.x,   rect1.top_left.y) 320.55 177.96 T
(,) 475.1 177.96 T
(             rect1.bot_right.x, rect1.bot_right.y\051;) 320.55 168.4 T
(}) 320.55 158.83 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
435.96 132.86 320.55 132.86 2 L
0 1 1 0 1 0 0 K
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 10.44 Q
(Structures et Pointeurs) 320.55 133.75 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(\321 la notation:) 320.55 118.1 T
1 F
(p->a) 390.75 118.1 T
2 F
(  \216quivaut \210:) 412.5 118.1 T
1 F
(\050*p\051.a) 475.16 118.1 T
2 F
(\321) 320.55 103.31 T
1 F
(typedef) 333.89 103.31 T
2 F
( cr\216e de nouveaux noms de type) 371 103.31 T
FMENDPAGE
%%EndPage: "mini" 16
%%Page: "mini" 17
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
27 0.39 639 792.39 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 4.35 Q
0 X
0 1 1 0 1 0 0 K
-0 0.44 (                                                            LANGAGE C                                                           65) 42.66 781.66 B
0 0 0 1 0 0 0 K
42.66 475.36 273.58 768.9 R
0.11 H
0 Z
0 0 0 1 0 0 0 K
N
1 1 0 0 0 0 1 K
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
1 1 0 0 0 0 1 K
(Eric LECOLINET) 143.04 463.33 T
0 0 0 1 0 0 0 K
1 1 0 0 0 0 1 K
(ENST - Paris) 147.02 458.11 T
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
158.37 467.46 161.78 470.87 R
7 X
0 0 0 1 0 0 0 K
V
158.41 468.76 160.52 470.87 R
0 X
V
-0.07 H
0 Z
N
27 0.39 639 792.39 C
1 1 0 0 0 0 1 K
1 5.22 Q
0 X
1 1 0 0 0 0 1 K
(Langage C - Eric Lecolinet - ENST Paris) 0 -90 269.34 581.47 TF
0 0 0 1 0 0 0 K
2 8.7 Q
0 0 0 1 0 0 0 K
(#include <stdio.h>    etc .......) 54.4 751.36 T
(#de\336ne NB_MODULES  8) 54.4 732.23 T
0 F
(typedef) 54.4 713.09 T
2 F
( struct ELEVE {) 85.33 713.09 T
(    char *nom, *prenom;) 54.4 703.53 T
(    short age;) 54.4 693.96 T
(    short notes[NB_MODULES];) 54.4 684.39 T
(}) 54.4 674.83 T
0 F
(Eleve) 59.72 674.83 T
2 F
(;) 82.45 674.83 T
(main\050\051) 54.4 655.69 T
({) 54.4 646.12 T
(    Eleve *res, *inf, *elec, *pe;) 54.4 636.56 T
(    int nb_res, nb_inf, nb_elec;) 54.4 626.99 T
(    printf\050"Entrer le nombre d\325\216l\217ves en RES : "\051;) 54.4 607.86 T
(    scanf\050"%d", &nb_res\051;) 54.4 598.29 T
(    res = \050Eleve*\051 malloc\050nb_res *) 54.4 579.15 T
0 F
(sizeof) 182.24 579.15 T
2 F
(\050Eleve\051\051;) 206.89 579.15 T
(    ... lire les donn\216es ...) 54.4 569.59 T
(    for \050pe = res; pe < res + nb_res; pe++\051 {) 54.4 550.45 T
(        printf\050"--- Eleve %s \134n",  pe) 54.4 540.88 T
0 F
(->) 176.1 540.88 T
2 F
(nom\051;) 184.08 540.88 T
(        printf\050"prenom : %s, age : %d \134n",) 54.4 531.32 T
(                 pe->prenom, pe->age\051;) 54.4 521.75 T
(        ....etc....) 54.4 512.18 T
(     }) 54.4 502.62 T
(}) 54.4 493.05 T
FMENDPAGE
%%EndPage: "mini" 17
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 17
%%DocumentFonts: Helvetica-Bold
%%+ Helvetica-BoldOblique
%%+ Helvetica
%%+ Courier-Bold
%%+ Helvetica-Oblique
%%+ Courier
%%+ Times-BoldItalic
%%EOF
